<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: flask | dawncold's tech blog]]></title>
  <link href="http://www.youth2009.org/blog/categories/flask/atom.xml" rel="self"/>
  <link href="http://www.youth2009.org/"/>
  <updated>2013-06-04T22:45:01+08:00</updated>
  <id>http://www.youth2009.org/</id>
  <author>
    <name><![CDATA[dawncold]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[生产环境下的flask调试]]></title>
    <link href="http://www.youth2009.org/blog/2012/07/17/flask-debug-in-production-environment-with-uwsgi/"/>
    <updated>2012-07-17T09:36:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2012/07/17/flask-debug-in-production-environment-with-uwsgi</id>
    <content type="html"><![CDATA[<p>生产环境是：nginx+uwsgi+flask+sqlalchemy等等等</p>

<p>自带的调试功能比较好用，也能很方便的查看各种变量的值，不过在生产环境中调试并不是那么容易。需要在uwsgi开启的时候传入“--catch exceptions”：</p>

<p><code>bash
uwsgi -s :9090 -M -p 4 -t 30 --limit-as 128 -R 10000 -d uwsgi.log --vhost --catch-exceptions
</code></p>

<p>在flask的app中要设置config中的PROPAGATE_EXCEPTIONS = True才可以在遇到错误的时候直接输出到页面上。</p>

<p>昨晚部署到服务器中，发现好多地方是500号错误，根本不知道在哪里出的错误，今天打开了这些才发现是jinja2模板中的do方法不识别，原来我把这个加载do操作放在了比较靠后的地方，在生产环境下不会去调用app了，所以原本写在<code>if __name__ == "__main__"</code>里面的东西就不会再调用了：）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flask中Jinja2加载扩展]]></title>
    <link href="http://www.youth2009.org/blog/2012/07/06/load-jinja2-extension-in-flask/"/>
    <updated>2012-07-06T20:34:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2012/07/06/load-jinja2-extension-in-flask</id>
    <content type="html"><![CDATA[<p>代码中我把jinja2的语法改成了这样的，{##}，因为这样就不会和blog生成html冲突了，大家改回来就可以。</p>

<p>在Flask中接触到了jinja2，由于某个简单的需要——在模板系统中计算某些订单项的总价格，必须打开Jinja2的“do”扩展，用一种hack的方法来计算，十分不喜欢这样，但能用。</p>

<p>在Flask的API中没有公开这样的方法，不过在邮件列表的索引里找到了：</p>

<p><code>python
app.jinja_env.add_extension("jinja2.ext.do")
</code></p>

<p>还想多说一下Jinja2的set方法，超级不爽的一个方法，原本以为set出来的变量就可以和python中的变量一样使用呢，结果在这里的set出来的变量也就是一个助记作用，根本不能保存新的值，也就是说这里的变量相当于我们通常意义上的常量！！！</p>

<p>```html
......
{# set total_price = 0 #}
{# for item in order.items #}
{# total_price = item.meal.price * item.quantity #}</p>

<p class = "order_list_item"></p>


<p>{# endfor #}
</td>
<td></td>
......
```</p>

<p>原本希望在for外面设置一个变量，然后在for中计算好total_price使用，结果根本不行，这样写的结果就是“找不到total_price变量”，如果去掉for中对total_price的引用就可以正常看到total_price，是0。总之，这里set出来的变量就是一个常量了！！！后来打开了do扩展，把total_price设置成一个list，然后在for中把没一项的价格都append进去，最终输出的地方用了jinja2的filter计算总和。大约会写成这样：</p>

<p>```html
......
{# set prices = [] #}
{# for item in order.items #}
{# do prices.append(item.meal.price * item.quantity) #}</p>

<p class = "order_list_item"></p>


<p>{# endfor #}
</td>
<td></td>
......
```</p>

<p>相信jinja2改进set之后会是一个很不错的模板系统：）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WTForms中的FileField验证]]></title>
    <link href="http://www.youth2009.org/blog/2012/07/05/validation-of-filefield-in-wtforms/"/>
    <updated>2012-07-05T20:17:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2012/07/05/validation-of-filefield-in-wtforms</id>
    <content type="html"><![CDATA[<pre><code>        &lt;p&gt;本来打算针对上传的图片进行验证，不过发现在form中加入enctype属性之后原本针对FileField的验证就不管用了，field.data始终是None，但是去掉enctype属性就ok，不过去掉之后不能上传文件了，所以最终只好去掉验证，在request中进行验证。&lt;/p&gt;
</code></pre>

<p>比如我是这样验证没有选择图片的：</p>


<br /><pre class="prettyprint linenums bush:python" lang="python">form = xxxForm(request.form)


<p>f = request.files["image"]
if len(f.filename) == 0:
  form.image.errors = ValidationError(u"need a pic file!!!")
  return render_template("xxx", form = form)
......</pre></p>

<br /><p>如果有不同的见解请告诉我哦！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VPS中部署了Flask框架]]></title>
    <link href="http://www.youth2009.org/blog/2012/07/02/deploy-flask-on-my-vps/"/>
    <updated>2012-07-02T20:46:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2012/07/02/deploy-flask-on-my-vps</id>
    <content type="html"><![CDATA[<pre><code>        &lt;p&gt;一开始我也是用web.py的，不料接受不了它的session处理，然后离开，Django这种庞大的东西我是没精力去研究了，当然开始也伴随激情看过文档，没坚持下去，后来和强锅一起找了不少框架做东西，我实践性比较强，就找到了Flask，感觉还挺好用的，做了一个todo，有兴趣可以看：http://todo.wodeyitian.com。&lt;/p&gt;
</code></pre>

<p>原先部署在dotcloud上，刚刚在自己的VPS上完成了nginx+uwsgi+flask的集成，当然还是没有废弃掉php，为了好几个博客嘛～</p>


<p>总的来说就是用virtualenv来创建各个app的目录，在里面安装需要的环境（flask、mysql-python、beautifulsoup4等等吧），nginx的配置大概如下：</p>


<br /><pre class="prettyprint linenums bush:bash" lang="bash">server {


<pre><code>  listen       80;
  server_name  todo.wodeyitian.com;
  location / {
            include uwsgi_params;
            uwsgi_pass 127.0.0.1:9090;
            uwsgi_param UWSGI_PYHOME /home/wwwroot/python_app_todo;
            uwsgi_param UWSGI_CHDIR /home/wwwroot/python_app_todo/app_dir;
            uwsgi_param UWSGI_SCRIPT todoApp:app;
  }
</code></pre>

<p>}</pre></p>

<br /><p>UWSGI_PYHOME是app的主目录，下面的CHDIR是app中py文件所在的目录，这个可以自己设置，下面的SCRIPT是入口脚本模块名和变量名，模块就是文件名喽，变量一般在flask都是用app作为整个网站的入口变量，写过python基本都能明白这个。</p>


<p>安装好uwsgi后可以配置开启：</p>


<br /><pre class="prettyprint linenums bush:bash" lang="bash">uwsgi -s :9090 -M -p 4 -t 30 --limit-as 128 -R 10000 -d uwsgi.log --vhost</pre>


<br /><p style="text-align: left;">使用9090端口监听，-M开启主控线程，-p 4是开启4个线程，-t 30是超过30秒不响应丢弃，limit-as 128是限制128Mb的内存占用，-R 10000是超过10000的请求就自动<span style="font-family: Verdana, sans-serif, 宋体;"><span style="line-height: 24px;">respawn（似乎是自动复制？重启？之类的），-d是日志，--vhost这个可以让多个app共用一个uwsgi，很好用的！</span></span></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sqlite3的rowcount]]></title>
    <link href="http://www.youth2009.org/blog/2012/05/14/the-rowcount-of-cursor-in-sqlite3/"/>
    <updated>2012-05-14T17:00:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2012/05/14/the-rowcount-of-cursor-in-sqlite3</id>
    <content type="html"><![CDATA[<pre><code>        &lt;p&gt;最近写了一个todo的webapp，在用户登陆的时候是select数据库中的内容进行对比判断，当然如果select的内容是0那就表示用户登陆失败了，可能账号或者密码写错了，数据库用的sqlite3，在python的api中发现有cursor.rowcount可用，于是就这么判断一下是不是有数据被select出来了，没想到这样判断是错误的。&lt;/p&gt;
</code></pre>

<p>select的rowcount永远为-1，哎，这里着实坑了我一番啊～</p>


<p>只好cursor.fetchone()先，然后判断得到的内容是不是None。</p>


<p>从<a href="http://stackoverflow.com/questions/839069/cursor-rowcount-always-1-in-sqlite3-in-python3k" target="_blank">这里</a>得到的答案。</p>

]]></content>
  </entry>
  
</feed>
