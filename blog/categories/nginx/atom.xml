<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: nginx | dawncold's tech blog]]></title>
  <link href="http://www.youth2009.org/blog/categories/nginx/atom.xml" rel="self"/>
  <link href="http://www.youth2009.org/"/>
  <updated>2012-12-17T20:11:46+08:00</updated>
  <id>http://www.youth2009.org/</id>
  <author>
    <name><![CDATA[dawncold]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[VPS中部署了Flask框架]]></title>
    <link href="http://www.youth2009.org/blog/2012/07/02/deploy-flask-on-my-vps/"/>
    <updated>2012-07-02T20:46:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2012/07/02/deploy-flask-on-my-vps</id>
    <content type="html"><![CDATA[<pre><code>        &lt;p&gt;一开始我也是用web.py的，不料接受不了它的session处理，然后离开，Django这种庞大的东西我是没精力去研究了，当然开始也伴随激情看过文档，没坚持下去，后来和强锅一起找了不少框架做东西，我实践性比较强，就找到了Flask，感觉还挺好用的，做了一个todo，有兴趣可以看：http://todo.wodeyitian.com。&lt;/p&gt;
</code></pre>

<p>原先部署在dotcloud上，刚刚在自己的VPS上完成了nginx+uwsgi+flask的集成，当然还是没有废弃掉php，为了好几个博客嘛～</p>


<p>总的来说就是用virtualenv来创建各个app的目录，在里面安装需要的环境（flask、mysql-python、beautifulsoup4等等吧），nginx的配置大概如下：</p>


<br /><pre class="prettyprint linenums bush:bash" lang="bash">server {


<pre><code>  listen       80;
  server_name  todo.wodeyitian.com;
  location / {
            include uwsgi_params;
            uwsgi_pass 127.0.0.1:9090;
            uwsgi_param UWSGI_PYHOME /home/wwwroot/python_app_todo;
            uwsgi_param UWSGI_CHDIR /home/wwwroot/python_app_todo/app_dir;
            uwsgi_param UWSGI_SCRIPT todoApp:app;
  }
</code></pre>

<p>}</pre></p>

<br /><p>UWSGI_PYHOME是app的主目录，下面的CHDIR是app中py文件所在的目录，这个可以自己设置，下面的SCRIPT是入口脚本模块名和变量名，模块就是文件名喽，变量一般在flask都是用app作为整个网站的入口变量，写过python基本都能明白这个。</p>


<p>安装好uwsgi后可以配置开启：</p>


<br /><pre class="prettyprint linenums bush:bash" lang="bash">uwsgi -s :9090 -M -p 4 -t 30 --limit-as 128 -R 10000 -d uwsgi.log --vhost</pre>


<br /><p style="text-align: left;">使用9090端口监听，-M开启主控线程，-p 4是开启4个线程，-t 30是超过30秒不响应丢弃，limit-as 128是限制128Mb的内存占用，-R 10000是超过10000的请求就自动<span style="font-family: Verdana, sans-serif, 宋体;"><span style="line-height: 24px;">respawn（似乎是自动复制？重启？之类的），-d是日志，--vhost这个可以让多个app共用一个uwsgi，很好用的！</span></span></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基本配置好了python+nginx]]></title>
    <link href="http://www.youth2009.org/blog/2011/08/08/python-uwsgi-nginx/"/>
    <updated>2011-08-08T11:12:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2011/08/08/python-uwsgi-nginx</id>
    <content type="html"><![CDATA[<pre><code>        &lt;p&gt;没想到配置过程有这么复杂，不过在按照Linode官方的指导做过之后发现一切又是那么简单，果然还是Linode的服务一流，同样的操作肯在所有发行版上都做一次教程，很少有VPS provider能够做到这些吧？看来贵还是有道理的。&lt;/p&gt;
</code></pre>

<p>不多赘述了，centos5的教程可以看这里（其他版本的在这里找：<a href="http://library.linode.com/web-servers/nginx/python-uwsgi">http://library.linode.com/web-servers/nginx/python-uwsgi</a>）</p>


<p><a href="http://library.linode.com/web-servers/nginx/python-uwsgi/centos-5">http://library.linode.com/web-servers/nginx/python-uwsgi/centos-5</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nginx下的location配置]]></title>
    <link href="http://www.youth2009.org/blog/2011/07/10/nginx-location-config/"/>
    <updated>2011-07-10T20:15:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2011/07/10/nginx-location-config</id>
    <content type="html"><![CDATA[<pre><code>        &lt;p&gt;原来的location只是处理了“/”的情况，结果访问一个目录，即使此目录下有index.html也不会成功显示，于是改成了这样：&lt;/p&gt;
</code></pre>

<br /><pre class="prettyprint linenums bush:bash" lang="bash">location ~.*\.(php|php5)?$


<p>{</p>

<pre><code> 处理php
</code></pre>

<p>}</pre></p>

<br /><p>这样之后，发现直接访问目录或者域名的时候不能正常显示了，必须跟上index.php这样的才可以。</p>


<p>最终改成这样，解决了问题：</p>


<br /><pre class="prettyprint linenums bush:bash" lang="bash">location / {


<pre><code>            root html;
            index index.html index.php;
</code></pre>

<p>}
location ~.*.(php|php5)?$ {
处理php
}</pre></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[架设GAE的反向代理]]></title>
    <link href="http://www.youth2009.org/blog/2011/06/04/reverse-proxy-for-gae/"/>
    <updated>2011-06-04T23:55:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2011/06/04/reverse-proxy-for-gae</id>
    <content type="html"><![CDATA[<pre><code>        &lt;p&gt;域名用的是app.wodeyitian.com 昨天用的方法不太稳定，现在找来一个不错的方法：&lt;/p&gt;
</code></pre>

<br /><pre class="prettyprint linenums bush:bash" lang="bash">upstream ghs {


<p>ip_hash;
server ghs.google.com;
server 72.14.203.121;
server 72.14.207.121;
server 74.125.43.121;
server 74.125.47.121;
server 74.125.53.121;
server 74.125.77.121;
server 74.125.93.121;
server 74.125.95.121;
server 74.125.113.121;
server 216.239.32.21;
server 216.239.34.21;
server 216.239.36.21;
server 216.239.38.21;
}</p>

<p>server {</p>

<pre><code>            listen       80;
            server_name app.wodeyitian.com;
            access_log  /home/wwwlogs/app.wodeyitian.com.log;
            location / {
                    proxy_redirect off;
                    proxy_set_header Host $host;
                    proxy_pass http://ghs;
                    proxy_set_header  x-real-IP  $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            }
    }&lt;/pre&gt;
</code></pre>

<br /><div>下面说说DNS这边怎么操作，因为网上说的太简单，我弄了好久都没弄好，终于在一篇文章那里找到了方法：</div>


<br /><div>首先上面的nginx配置完毕后，在dns面板中把app.wodeyitian.com的A记录只想VPS的IP，然后要保证wodeyitian.com这个域注册了Google的app服务，这样就能在appspot那里把wodeyitian.com旗下的子域名加到你的appspot上了，后台把app.wodeyitian.com添加到了dawncold1.appapot.com这个应用上，然后就不用管Google提供的更改cname到ghs.google.com的建议了，国内基本没戏了。</div>


<br /><div>Google说的cname方法就是我们现在正在使用的反向代理吧，于是我们只需要有app.wodeyitian.com到主机的A记录即可，后面的操作都是nginx的反向代理在工作。</div>


<br /><div>我一开始建立了app.wodeyitian.com这个站之后，我以为就是当成ghs的工作了，用了另外一个域名做了cname到这里，结果不响应，可能还有其他问题吧：（</div>


<br /><div>感谢这里：<a href="http://www.nealmi.com/index.php/2011/03/nginx-reverse-proxy-usage/">http://www.nealmi.com/index.php/2011/03/nginx-reverse-proxy-usage/</a>


<p></div></p>
]]></content>
  </entry>
  
</feed>
