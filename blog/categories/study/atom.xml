<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Study | Trade Off]]></title>
  <link href="http://www.youth2009.org/www.youth2009.org/blog/categories/study/atom.xml" rel="self"/>
  <link href="http://www.youth2009.org/www.youth2009.org/"/>
  <updated>2015-10-29T23:29:16+08:00</updated>
  <id>http://www.youth2009.org/www.youth2009.org/</id>
  <author>
    <name><![CDATA[dawncold]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Build Hybla for Ubuntu 14.04]]></title>
    <link href="http://www.youth2009.org/www.youth2009.org/blog/2015/10/27/build-hybla-for-ubuntu-14-dot-04/"/>
    <updated>2015-10-27T00:42:28+08:00</updated>
    <id>http://www.youth2009.org/www.youth2009.org/blog/2015/10/27/build-hybla-for-ubuntu-14-dot-04</id>
    <content type="html"><![CDATA[<p>When I modify some ipv4 config for system I got an error like this: <code>sysctl: setting key "net.ipv4.tcp_congestion_control": No such file or directory</code>, so I followed <a href="http://v2ex.com/t/114788">this post</a> to build a kernel module for ubuntu 14.04</p>

<p>The net/ipv4 hybla Makefile(bad script format in original post):</p>

<pre><code># Makefile for tcp_hybla.ko
obj-m := tcp_hybla.o
KDIR := /home/dejavu/linux-4.1.5
PWD := $(shell pwd)
default:
    $(MAKE) -C $(KDIR) SUBDIRS=$(PWD) modules
</code></pre>

<p>I also got a warning during build modules: <code>No X.509 certificates found</code>, but it doesn&rsquo;t matter I think, I can build the <code>tcp_hybla.ko</code> and load in kernel.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sort and Uniq Count]]></title>
    <link href="http://www.youth2009.org/www.youth2009.org/blog/2015/08/27/sort-and-uniq-count/"/>
    <updated>2015-08-27T19:41:46+08:00</updated>
    <id>http://www.youth2009.org/www.youth2009.org/blog/2015/08/27/sort-and-uniq-count</id>
    <content type="html"><![CDATA[<p>I got some logs which recorded someone IP address and the URL it requests, I want to summary how many unique IP addresses request some specified URL, and request counts for one IP address.</p>

<p>so I filter out specified URL rows:
<code>
grep URL_PATH *.log
</code></p>

<p>then I got these rows:
<code>
...
[ 2015-08-26T23:59:59+08:00 ] 14.219.202.241 /xx
[ 2015-08-26T23:59:59+08:00 ] 14.219.202.241 /xx
[ 2015-08-26T23:59:59+08:00 ] 14.219.202.241 /xx
[ 2015-08-26T23:59:59+08:00 ] 14.219.202.241 /xx
[ 2015-08-26T23:59:59+08:00 ] 14.219.202.241 /xx
[ 2015-08-26T23:59:59+08:00 ] 14.219.202.241 /xx
...
</code>
then I use <code>awk</code> print the fourth column:
<code>
grep URL_PATH *.log | awk '{print $4}'
</code></p>

<p>then I got these IPs, I stored these IPs to a file, then <code>sort</code> and <code>uniq</code>, the <code>uniq</code> excepts a sorted file, the <code>-c</code> option means count these rows:
<code>
sort ips | uniq -c
</code>
then I got some unique rows with counts, but I want sort these rows order by counts desc:</p>

<pre><code>sort ips | uniq -c | sort -k1nr -k2
</code></pre>

<p>the <code>-k1nr</code> means the KEY starts with first field, and as (n)umber, and &reg;everse, the <code>-k2</code> means ends with second field. The <code>field</code> means the column in your data.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tornado-2]]></title>
    <link href="http://www.youth2009.org/www.youth2009.org/blog/2015/08/21/tornado-2/"/>
    <updated>2015-08-21T22:17:23+08:00</updated>
    <id>http://www.youth2009.org/www.youth2009.org/blog/2015/08/21/tornado-2</id>
    <content type="html"><![CDATA[<p>write some subclasses of <code>RequestHandler</code> and mapped these with routers, pass these routers to <code>Application</code>, run <code>Application</code>.</p>

<pre><code class="python">from tornado.ioloop import IOLoop
from tornado.web import RequestHandler, Application, url

class HelloHandler(RequestHandler):
    def get(self):
        self.write("Hello, world")

def make_app():
    return Application([
        url(r"/", HelloHandler),
        ])

def main():
    app = make_app()
    app.listen(8888)
    IOLoop.current().start()
</code></pre>

<p>Tornado supports strings, bytes, and dictionaries as response, you can use Template to building strings and bytes, also you can write response by hand. If you pass a dictionary to response, it will be encoded as JSON.</p>

<p>Tornado will not parse other types request arguments, e.g. Tornado will not parse JSON request bodies, you need to parse these by yourself(override <code>prepare</code> method)</p>

<p>CSRF/XSRF prevent: the session cookie from SiteA is not expired, there is a form in SiteB, the form aims doing something to SiteA, if SiteA don&rsquo;t support XSRF prevent, it will allow submitting if you constructed valid form arguments. If SiteA supports XSRF prevent, it will set a cookie with token to user, and that token will filled in any action form(POST,PUT,DELETE), if these two values are not equal, that request will be prevented, because SiteB can&rsquo;t retrive SiteA&rsquo;s cookie, so that form can&rsquo;t submit with valid cookie value.</p>

<p>Due to the Python GIL (Global Interpreter Lock), it is necessary to run multiple Python processes to take full advantage of multi-CPU machines. Typically it is best to run one process per CPU.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tornado-1]]></title>
    <link href="http://www.youth2009.org/www.youth2009.org/blog/2015/08/16/tornado-1/"/>
    <updated>2015-08-16T16:16:51+08:00</updated>
    <id>http://www.youth2009.org/www.youth2009.org/blog/2015/08/16/tornado-1</id>
    <content type="html"><![CDATA[<p>This is the first part of Tornado studying project.</p>

<p>Tornado can be roughly divided into four major components:</p>

<ul>
<li>A web framework (including RequestHandler which is subclassed to create web applications, and various supporting classes).</li>
<li>Client- and server-side implementions of HTTP (HTTPServer and AsyncHTTPClient).</li>
<li>An asynchronous networking library (IOLoop and IOStream), which serve as the building blocks for the HTTP components and can also be used to implement other protocols.</li>
<li>A coroutine library (tornado.gen) which allows asynchronous code to be written in a more straightforward way than chaining callbacks.</li>
</ul>


<p>Tornado uses a signle-threaded event loop.This means that all application code should aim to be asynchronous and non-blocking because only one operation can be active at a time.</p>

<p>There are many styles of asynchronous interfaces:</p>

<ul>
<li>Callback argument</li>
<li>Return a placeholder (Future, Promise, Deferred)</li>
<li>Deliver to a queue</li>
<li>Callback registry (e.g. POSIX signals)</li>
</ul>


<p>There is no free way to make a synchronous function asynchronous in a way that is transparent to its callers.</p>

<p>Coroutines are the recommended way to write asynchronous code in Tornado</p>

<p>A function containing yield is a generator. All generators are asynchronous; when called they return a generator object instead of running to completion.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NotImplemented-in-python]]></title>
    <link href="http://www.youth2009.org/www.youth2009.org/blog/2014/12/26/notimplemented-in-python/"/>
    <updated>2014-12-26T21:03:20+08:00</updated>
    <id>http://www.youth2009.org/www.youth2009.org/blog/2014/12/26/notimplemented-in-python</id>
    <content type="html"><![CDATA[<p>It&rsquo;s best to return <code>NotImplemented</code> in magic method(e.g. <code>__eq__</code>, <code>__ne__</code>, etc), see <a href="http://shahriar.svbtle.com/python-notimplemented-type">here</a> for details.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">example</span><span class="o">.</span><span class="n">py</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">A</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="err">&lt;</span><span class="nf">strong</span><span class="o">&gt;</span><span class="n">init</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">__eq__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">other</span><span class="p">,</span> <span class="n">A</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&#39;Comparing an A with an A&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">other</span><span class="o">.</span><span class="n">value</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">value</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">other</span><span class="p">,</span> <span class="n">B</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&#39;Comparing an A with a B&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">other</span><span class="o">.</span><span class="n">value</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">value</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&#39;Could not compare A with the other class&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">NotImplemented</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">B</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="err">&lt;</span><span class="nf">strong</span><span class="o">&gt;</span><span class="n">init</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">__eq__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">other</span><span class="p">,</span> <span class="n">B</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&#39;Comparing a B with another B&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">other</span><span class="o">.</span><span class="n">value</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">value</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&#39;Could not compare B with the other class&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">NotImplemented</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><code>a</code> is instance of ClassA, and <code>b</code> is instance of ClassB, if we invoke <code>a == b</code>, we will get the result, True or False, but if we invoke <code>b == a</code>, we will also get the result! Because of we return <code>NotImplemented</code> in Class B&rsquo;s <code>__eq__</code> method, runtime could invoke Class A&rsquo;s <code>__eq__</code>, that method can compare A and B.</p>
]]></content>
  </entry>
  
</feed>
