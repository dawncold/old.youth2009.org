<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: study | Trade Off]]></title>
  <link href="http://www.youth2009.org/blog/categories/study/atom.xml" rel="self"/>
  <link href="http://www.youth2009.org/"/>
  <updated>2013-07-27T01:44:29+08:00</updated>
  <id>http://www.youth2009.org/</id>
  <author>
    <name><![CDATA[dawncold]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[link-layer]]></title>
    <link href="http://www.youth2009.org/blog/2013/07/27/link-layer/"/>
    <updated>2013-07-27T00:03:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/07/27/link-layer</id>
    <content type="html"><![CDATA[<h2>link layer</h2>

<h3>link layer&rsquo;s usage</h3>

<ol>
<li>send and receive IP datagram</li>
<li>ARP request and reply</li>
<li>RARP request and reply</li>
</ol>


<p>many different link layers, depending on the type of networking: ethernet, token ring, FDDI, RS232 serial lines, etc.</p>

<p>IEEE 802.2/3 format and Ethernet format</p>

<p>in 802 format, after 2 bytes length field, there are 3 bytes LLC and 5 bytes SNAP and data field(38~1492) but in Ethernet format, there will be data field(46~1500), the end field is 4 bytes CRC.</p>

<p>frame formats use 48-bits destination and source address</p>

<h2>SLIP: Serial Line IP</h2>

<p>END &mdash; 0xc0</p>

<p>SLIP ESC &mdash; 0xdb</p>

<p>IP datagram will be terminated by a special character called END(0xc0), most implementations transmit an END at the beginning of the datagram.</p>

<p>if a byte of IP datagram equals:</p>

<p>0xc0 &mdash;> 0xdb, 0xdc</p>

<p>0xdb&mdash;>0xdb, 0xdd</p>

<h2>PPP</h2>

<ol>
<li>async link with 8bits of data and no parity(no checksum)</li>
<li>bit-oriented sync links</li>
</ol>


<p>start and end with a flag byte whose value is 0x7e, and if a byte value appears in information field, it should be escaped.</p>

<p>batter than SLIP:(pay for 3 bytes addition)</p>

<ol>
<li>multiple protocols on a serial line</li>
<li>CRC</li>
<li>IP network control protocol negotiate IP address for each end</li>
<li>header compress like CSLIP</li>
<li>link control protocol negotiate many data-link options</li>
</ol>


<h2>Loopback</h2>

<p>127.0.0.1 or localhost is the loopback interface, an IP datagram sent to this must not appear on any network.</p>

<p>datagrams sent to broadcast and multicast addtess are copied to the loopback interface and sent out on the Ethernet.</p>

<p>anything sent to one of the host&rsquo;s own IP addresses is ent to the loopback interface!</p>

<h1>MTU</h1>

<p>if the length of data field in IP datagram is larger than MTU(1500 or 1492 in Ethernet and 802 format), it will be fragmented.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OCP-talks]]></title>
    <link href="http://www.youth2009.org/blog/2013/07/26/ocp-talks/"/>
    <updated>2013-07-26T22:27:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/07/26/ocp-talks</id>
    <content type="html"><![CDATA[<p>Good design should be open for extension and closed for modification. You can extend the module instead of modifying some working code.</p>

<p>Abstraction is the Key: for example, a Client should use an Server object that implemented some interfaces instead of a concrete Server object.</p>

<p>Interface&rsquo;s name should be named more closely associated to the dependent side instead of the implement side.</p>

<p>A function that is closed for modification: if we add some changes for this function, it must be modified for working right, it may unconform OCP. For example, a function that draw all shapes in a shape list, it should be draw shapes one by one, and don&rsquo;t care this shape should draw in this way, another shape should draw in that way, etc.</p>

<p>No matter how &ldquo;closed&rdquo; a module is, there will always be some kind of change against which it is not closed.</p>

<p>Abstraction may gain &ldquo;closed&rdquo; software entity(func, module, class, etc), but it also need trade off.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[some-sed-work]]></title>
    <link href="http://www.youth2009.org/blog/2013/06/15/some-sed-work/"/>
    <updated>2013-06-15T16:34:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/06/15/some-sed-work</id>
    <content type="html"><![CDATA[<p>博客内容是从wordpress转过来的，不可避免有很多地方没转换好，当时懒得弄，今天得空学习Shell编程，讲到了sed，就又搞了一下，基本满意了。</p>

<p>以前用sed替换过分类等简单的文字错误，今天主要是把一些html给替换掉了。</p>

<p>把<code>&lt;p&gt;</code>删掉，在删掉<code>&lt;/p&gt;以及&lt;br /&gt;</code>后面加换行等：</p>

<p><code>sed -i "" -e 's;&lt;/p&gt;;\'$'\n;g' *.markdown</code></p>

<p><code>sed -i "" -e 's;&lt;br /&gt;;\'$'\n;g' *.markdown</code></p>

<p>需要注意的是Mac OS中的sed和我看到的很不一样，所以这个替换都是特殊的，来自<a href="http://cafenate.wordpress.com/2010/12/05/newlines-in-sed-on-mac/">这里</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[give up ruby]]></title>
    <link href="http://www.youth2009.org/blog/2013/01/27/give-up-ruby/"/>
    <updated>2013-01-27T18:39:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/01/27/give-up-ruby</id>
    <content type="html"><![CDATA[<p>感觉中间隔了好久，最终还是把study ruby给放弃了，顺便找了个充足的理由——在没学好当下这门语言之前，不要再尝试其他的。</p>

<p>虽然一个coder要保持技术的敏感性与前瞻性，但频繁换编程语言实在不是一件好事，我现在仍然对于自己涉猎太多编程语言而感到烦躁，主要就是会的太多而不精，一旦用上了还真拿不出手，那种感觉很不爽！所以，暂且不要跟着《Pragmatic Programmer》中说得那样来了。</p>

<p>暂且这样吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gets method in ruby]]></title>
    <link href="http://www.youth2009.org/blog/2013/01/03/gets-method-in-ruby/"/>
    <updated>2013-01-03T20:40:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/01/03/gets-method-in-ruby</id>
    <content type="html"><![CDATA[<p><strong>Important</strong>: Also notice that we&rsquo;re using STDIN.gets instead of plain &lsquo;ol gets. That is because if there is stuff in ARGV, the default gets method tries to treat the first one as a file and read from that. To read from the user&rsquo;s input (i.e., stdin) in such a situation, you have to use it STDIN.gets explicitly.</p>
]]></content>
  </entry>
  
</feed>
