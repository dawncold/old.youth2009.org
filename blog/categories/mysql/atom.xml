<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mysql | Trade Off]]></title>
  <link href="http://www.youth2009.org/www/blog/categories/mysql/atom.xml" rel="self"/>
  <link href="http://www.youth2009.org/www/"/>
  <updated>2014-08-22T23:30:52+08:00</updated>
  <id>http://www.youth2009.org/www/</id>
  <author>
    <name><![CDATA[dawncold]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[mysql只允许127.0.0.1连接的解决方法]]></title>
    <link href="http://www.youth2009.org/www/blog/2012/06/05/solved-mysql-refuse-localhost-connection/"/>
    <updated>2012-06-05T10:30:00+08:00</updated>
    <id>http://www.youth2009.org/www/blog/2012/06/05/solved-mysql-refuse-localhost-connection</id>
    <content type="html"><![CDATA[<p>我上次记录过一次这样的情况，突然间所有的php应用无法连接数据库了，但可惜我忘记是为何导致了这样的结果，总是有很多奇怪的地方在这个vps上发生，比如有次突然在某个app中出现了嵌入的广告，这个app可是我写的呀，怎么会有广告？！还有就是那次mysql突然无法连接了，最后用127.0.0.1代替了localhost。</p>

<p>昨晚国庆安装了织梦的后台，但提示无法使用数据库，由于昨天太晚了没有深入研究，早晨起来看了一下，有人说去查看data/common.inc.php文件中的信息，我去看了一下，突然想起来localhost不能用了，于是改为127.0.0.1就可以了，但这也只是缓兵之计，于是想办法解决！</p>

<p>解决方法也不尽相同，就是在php.ini中的三处添加“/tmp/mysql.sock”，那三处就是：mysql.default_socket、mysqli.default_socket、pdo_mysql.default_socket，看名字就是php连接mysql的三种方法的默认socket路径，原来我就修改了两处，漏掉了mysqli这种，结果现在不少程序都是用这种方式连接，比如phpmyadmin和织梦，所以呢，修改了这三处就ok了（当然你得确定你用socket这种方式连接）</p>

<p>至此我的phpmyadmin也可以用socket登录了，织梦也能访问数据库了，再也不用127.0.0.1啦~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ldconfig: /usr/lib/libmysqlclient.so.16 is not a symbolic link的问题]]></title>
    <link href="http://www.youth2009.org/www/blog/2012/05/23/two-mysql-lib-issue-after-yum-update/"/>
    <updated>2012-05-23T19:50:00+08:00</updated>
    <id>http://www.youth2009.org/www/blog/2012/05/23/two-mysql-lib-issue-after-yum-update</id>
    <content type="html"><![CDATA[<p>刚刚用yum升级了系统，发现日志中有很多这样的提示：</p>

<p><code>bash
ldconfig: /usr/lib/libmysqlclient.so.16 is not a symbolic link
ldconfig: /usr/lib/libmysqlclient_r.so.16 is not a symbolic link
</code></p>

<p>于是Google了一下，找到一个解决方法，在<a href="http://tiger.im/286.html">这里</a>.</p>

<p>就是重建了两条连接过去即可：</p>

<p><code>bash
ln -sf /usr/local/mysql/lib/mysql/libmysqlclient.so.16 /usr/lib/mysqlclient.so.16
ln -sf /usr/local/mysql/lib/mysql/libmysqlclient_r.so.16 /usr/lib/libmysqlclient_r.so.16
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用python备份mysql]]></title>
    <link href="http://www.youth2009.org/www/blog/2012/04/27/backup-mysql-databases-using-python/"/>
    <updated>2012-04-27T20:44:00+08:00</updated>
    <id>http://www.youth2009.org/www/blog/2012/04/27/backup-mysql-databases-using-python</id>
    <content type="html"><![CDATA[<p>备份数据库的重要性不想多说了。</p>

<p>&#8220;`python</p>

<h1>! /usr/bin/env python</h1>

<h1>coding: utf-8</h1>

<p>import os
import sys
from datetime import *
import time</p>

<h1>mysql&rsquo;s path</h1>

<p>mysql_path = &lsquo;/usr/local/mysql/bin/&rsquo;</p>

<h1>edit this if your mysql username and password is not like this:</h1>

<p>mysql_username = &lsquo;root&rsquo;
mysql_password = &lsquo;xxxxxx&rsquo;</p>

<h1>backup path</h1>

<p>backup_path = &lsquo;mysqlbackup/&rsquo;</p>

<p>def validate_backup_path():
if os.path.exists(backup_path) == False:
print &ldquo;I create a directory here: %s &rdquo; % backup_path
os.mkdir(backup_path)</p>

<p>def backup_all_databases():
filename = &ldquo;all_%s.sql&rdquo; % (datetime.utcfromtimestamp(time.time()))
os.system(&ldquo;%smysqldump -u%s -p%s &mdash;all-databases > &lsquo;%s%s&rsquo;&rdquo; % (mysql_path, mysql_username, mysql_password, backup_path, filename))</p>

<p>if <strong>name</strong> == &ldquo;<strong>main</strong>&rdquo;:
validate_backup_path()
backup_all_databases()
print &ldquo;finish!!!&rdquo;
&#8220;`</p>

<p>这个是修改了一次的备份脚本，本来是分数据库备份的，无奈制定了分数据库备份需要输入密码，这就不容易加入cron来自动完成了，不过听说在my.cnf中加入mysqldump的设置可以避免输入账号密码，这也算是一个办法吧，不过还是本着简化的思想，只导出所有数据库出来就好，配合着上一篇的dropbox自动备份，这样VPS的灾备就稍稍好些了：）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[重置MySQL密码]]></title>
    <link href="http://www.youth2009.org/www/blog/2011/12/07/reset-the-password-of-mysql/"/>
    <updated>2011-12-07T17:46:00+08:00</updated>
    <id>http://www.youth2009.org/www/blog/2011/12/07/reset-the-password-of-mysql</id>
    <content type="html"><![CDATA[<p>前几天在Mac系统下装了MySQL，装完后是默认没有给root用户带密码的，于是出于安全考虑我就加上了密码，加密码的方式如下：</p>

<p><code>bash
mysqladmin -u root password "mysqlpassword"
</code></p>

<p>很明显引号内的是root用户的新密码。</p>

<p>但在使用的时候我一时想不起来密码了，于是搜索到了官方的Reset the password of MySQL，但看着好麻烦，没有尝试，在<a href="http://huoding.com/2011/06/12/85">这里</a>找到了方法，贴出来主要代码：</p>

<p>先停止mysql的服务，用下面这句启动mysql：</p>

<p>&#8220;`sql
mysqld_safe &mdash;skip-grant-tables &mdash;skip-networking &amp;</p>

<p>&#8220;`</p>

<p>用SQL语句修改root的密码：</p>

<p><code>sql
UPDATE mysql.user SET Password=PASSWORD('...') WHERE User='...' AND Host= '...';
FLUSH PRIVILEGES;
</code></p>

<p>单引号内的东西自己补充吧，第一个是新密码，第二个写root，第三个用localhost就可以了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安装MySQLdb出现HAVE_WCSCOLL重定义问题的解决方法]]></title>
    <link href="http://www.youth2009.org/www/blog/2011/08/08/mysqldb-have_wcscoll-redefined/"/>
    <updated>2011-08-08T14:35:00+08:00</updated>
    <id>http://www.youth2009.org/www/blog/2011/08/08/mysqldb-have_wcscoll-redefined</id>
    <content type="html"><![CDATA[<p>问题就是这样了：</p>

<p>&#8220;`bash
[root@wodeyitian MySQL-python-1.2.3]# python setup.py install
running install
running bdist_egg
running egg_info
writing MySQL_python.egg-info/PKG-INFO
writing top-level names to MySQL_python.egg-info/top_level.txt
writing dependency_links to MySQL_python.egg-info/dependency_links.txt
reading manifest file &lsquo;MySQL_python.egg-info/SOURCES.txt&rsquo;
reading manifest template &lsquo;MANIFEST.in&rsquo;
warning: no files found matching &lsquo;MANIFEST&rsquo;
warning: no files found matching &lsquo;ChangeLog&rsquo;
warning: no files found matching &lsquo;GPL&rsquo;
writing manifest file &lsquo;MySQL_python.egg-info/SOURCES.txt&rsquo;
installing library code to build/bdist.linux-x86_64/egg
running install_lib
running build_py
copying MySQLdb/release.py &ndash;> build/lib.linux-x86_64-2.7/MySQLdb
running build_ext
building &lsquo;<em>mysql&rsquo; extension
gcc -pthread -fno-strict-aliasing -g -O2 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -fPIC -Dversion_info=(1,2,3,&lsquo;final&rsquo;,0) -D<strong>version</strong>=1.2.3 -I/usr/include/mysql -I/usr/local/include/python2.7 -c </em>mysql.c -o build/temp.linux-x86_64-2.7/<em>mysql.o -g -pipe -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector &mdash;param=ssp-buffer-size=4 -m64 -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -fno-strict-aliasing -fwrapv
在包含自 </em>mysql.c：36 的文件中:
/usr/include/mysql/my_config.h:1062:1: 警告：“HAVE_WCSCOLL”重定义
在包含自 /usr/local/include/python2.7/Python.h：8 的文件中，</p>

<pre><code>            从 pymemcompat.h：10，
            从 _mysql.c：29:
</code></pre>

<p>/usr/local/include/python2.7/pyconfig.h:887:1: 警告：这是先前定义的位置
gcc -pthread -shared build/temp.linux-x86_64-2.7/<em>mysql.o -L/usr/lib64/mysql -L/usr/lib64 -lmysqlclient_r -lz -lpthread -lcrypt -lnsl -lm -lpthread -lssl -lcrypto -o build/lib.linux-x86_64-2.7/</em>mysql.so
/usr/bin/ld: cannot find -lmysqlclient_r
collect2: ld 返回 1
error: command &lsquo;gcc&rsquo; failed with exit status 1
&#8220;`</p>

<p>也不算什么解决方法吧，就是缺失一些组件，安装了mysql-devel就好了：</p>

<p><code>bash
yum install mysql-devel.x86_64
</code></p>
]]></content>
  </entry>
  
</feed>
