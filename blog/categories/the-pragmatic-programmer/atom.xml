<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: the-pragmatic-programmer | Trade Off]]></title>
  <link href="http://www.youth2009.org/blog/categories/the-pragmatic-programmer/atom.xml" rel="self"/>
  <link href="http://www.youth2009.org/"/>
  <updated>2013-12-03T22:01:01+08:00</updated>
  <id>http://www.youth2009.org/</id>
  <author>
    <name><![CDATA[dawncold]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[pragmatic programmer log]]></title>
    <link href="http://www.youth2009.org/blog/2012/11/25/the-pragmatic-programmer/"/>
    <updated>2012-11-25T20:43:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2012/11/25/the-pragmatic-programmer</id>
    <content type="html"><![CDATA[<p>Bad code requires lots of comments!</p>

<p>head file 也是一种重复，这属于language的重复，一般只能妥协。</p>

<p>“出来混迟早要还的”，这句话又出现了！！！</p>

<p>deal with interdeveloper duplication的方法就是多多交流。。。每天的站立会议是不错的！</p>

<p>依然补充几个单词：</p>

<pre><code>contradictory:          矛盾的
marauding:              恶意的
harness:                管理，控制
enhacing:               增强
constantly:             不断地
discrete:               不连续的
entire:                 全部的
representation:         陈述
nightmare:              噩梦
authoritative:          权威性的
inadvertent:            不注意的
imposed:                强制的
honoring:               尊敬
ingenuity:              精巧
metadata:               元数据
one-time:               一次的
inevitably:             不可避免地
defer:                  推迟
reveal:                 显示
illustrate:             说明
violate:                违犯
insidious:              暗中危害的
foster:                 培养
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pragmatic programmer log]]></title>
    <link href="http://www.youth2009.org/blog/2012/11/11/pragmatic-programmer-log/"/>
    <updated>2012-11-11T14:19:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2012/11/11/pragmatic-programmer-log</id>
    <content type="html"><![CDATA[<p>昨晚看完了第一章，顿时感觉十分充实，因为在过去的一个星期里每晚都在看书而不是把时间花在weibo上。Your Knowledge Protfolio讲的是为自己的知识不断投资，你现在钟爱的或者正在使用的技术可能只是当前这个时期火热的，他们会随着时间的推演发生巨变，如果你不不断为自己的知识投资，那很难适应社会的发展需要。我们搞编程的感受应该非常丰富，可以说每天都有新技术出现老技术衰亡，应对这种挑战就应该定期学习新技术，更多的掌握技术从而面对一个问题你能有很多种解决方案。</p>

<p>后面讲了要批判性思维，海量信息涌入的时候不要乱了阵脚，思考哪些是真的哪些是假的，对于信息社会这点已经很平常了。</p>

<p>交流。我们不能闭门造车，人与人之间的交流永远大于人与机器间的交流。作者介绍了一些交流方面的技巧，其实不必太在乎这么多，只要合理处理好人际关系，跟着感觉走就不会有问题。</p>

<p>补充很多单词：</p>

<pre><code>interest:           投资
pithy:              简称的
homily:             训诫
irrlelvant:         不恰当的、不想干的
obsolete:           过时的
regularly:          定期的，有规律的
diversification:    多元化
spectrum:           范围
potentially:        潜在的
high-reward:        高回报
conservatively:     保守地
miss out:           错过机会
emerging:           正在浮现的
payoff:             收益
intellectual:       智力的
capital:            资本
rut:                常规
equation:           相等、均衡
vice:               代替
versa:              反
cross-pollination:  交叉授粉
voraciously:        贪婪地
faintest:           模糊的
guru:               专家
thumbing:           翻阅
vendor:             小贩
beware:             小心
unswayed:           不受影响的
zealot:             狂热者
underestimate:      低估
commercialism:      商业主义
dogma:              教条
insist:             坚持
torrent:            激流
sterile:            无结果的
proposal:           提议
advocate:           主张
justify:            证明
convey:             表达
</code></pre>

<p>“出来混总是要还的”，这句话已经被很多人认定是亘古不变的真理了，呵呵。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pragmatic programmer log]]></title>
    <link href="http://www.youth2009.org/blog/2012/11/09/pragmatic-programmer-log/"/>
    <updated>2012-11-09T00:05:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2012/11/09/pragmatic-programmer-log</id>
    <content type="html"><![CDATA[<p>比较喜欢的一章，讲软件的足够完美性。世间几乎所有东西都不是完美的，当然有完美的——“不完美”就是完美的，就像“永远不变的只有变化”一样。</p>

<p>似乎和昨天的有些关联，要先给用户们一个不够完美的东西用，他们就会给出意见，你再逐渐完美这个软件，当然这也不可能达到完美的标准，只是更接近用户的需求了，其实这已经足够了，你为了用户制定出软件，满足了他们的需求不就是完美的了么？那些什么良好的UI、UE，如果end user根本都没能感到你的用心良苦，那只能算是你的蛋疼设计了（为用户创造出需求的除外）。</p>

<p>质量算是需求的一部分么？</p>

<p>我们的需求文档会包含质量的规约么？乍一看似乎有不同声音，需求文档只要满足需求，需求又是什么呢？人们在描述自己需求的时候会加入质量这个衡量标准么？还是找大牛们交流去吧。</p>

<p>何时stop。这个问题在我这里常常出现，似乎coder都免不了带点完美主义，做一个feature会不断refine it，最终overrefinement，make a solution becomes academic research。作者没明确说when，只是说for a while，然后慢慢完善就好了。。。不负责的作者。</p>

<p>补充几个单词：</p>

<pre><code>overembellishment:      过于美化
sketch out:             拟订
preferable:             更好的
tight:                  紧的
polish up:              改善
advocate:               提倡
stringent:              紧迫的
pacemaker:              心脏起搏器
space shuttle:          航天飞机
disseminate:            公开的
shorter incubation:     短潜伏期
conspire:               阴谋
oft:                    常常
mar:                    破坏
strive:                 努力
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pragmatic programmer log]]></title>
    <link href="http://www.youth2009.org/blog/2012/11/07/pragmatic-programmer-log/"/>
    <updated>2012-11-07T23:38:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2012/11/07/pragmatic-programmer-log</id>
    <content type="html"><![CDATA[<p>stone soup 和 boiled forgs是两种不同的引导，一种是良性的，一种是”恶性”的。恶性的意思是，你对forg有伤害，最后被你煮死了。而stone soup只是借助其他人的力量达到自己的愿望，所以，boiled forgs主要还是提醒我们要有一个big picture的概念，时刻拥有，感知周围的changes，否则你只有被cook了。</p>

<p>我们似乎正处在stone soup这个环境里，做出的产品正在给编辑们用，还有一些别的部门后期也会参与进来，让他们使用这个并不完善的系统，然后得到那种“如果加上xxx就会更好用”了的建议，我们再改进，最终能够做一个让用户满意的系统，那也是我们的愿望。</p>

<p>来几个单词：</p>

<pre><code>hoard:          贮存
undeterred:     未受损的
ingredient:     作料
moral:          道德
trick:          戏弄
catalyst:       催化剂
synergistic:    协同的
tackle:         处理
stare:          凝视
fatigue:        疲劳
reasonably:     适当地
marvel:         惊异
glimpse:        一瞥
gradual:        逐渐
progressively:  逐渐地
deception:      骗局
tightly:        紧紧地
creep up on:    爬向
inexorably:     不可阻挡地
disaster:       灾难
morale:         斗志
perceive:       注意到
will:           决心，意志
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pragmatic programmer log2]]></title>
    <link href="http://www.youth2009.org/blog/2012/11/06/pragmatic-programmer-log2/"/>
    <updated>2012-11-06T22:58:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2012/11/06/pragmatic-programmer-log2</id>
    <content type="html"><![CDATA[<p>Software Entropy主要讲了软件遵循物理中的熵增大原理，软件会逐渐变得rot，而这里面还存在一个broken window的问题，一旦开始rot了，到了一定程度，可以说是有了broken window，然后会有越来越多的broken window，因为人们已经不觉得clean code在现在有多么重要，一旦这样的想法形成，就会有跟多这样的想法，最终积累起来就把软件毁掉了。其实这看起来很想是马太效应不是么？</p>

<p>补充几个新单词：</p>

<pre><code>immune:         免疫
delicate:       微妙的
decay:          腐化
hulk:           笨重的东西
crime:          犯罪
substantial:    大量的
graffiti:       涂鸦
infraction:     违法
offending:      冒犯的，违法的
substitite:     用…代替
deteriorate:    恶化
dumpster:       大型垃圾箱
obscenely:      猥亵的，淫秽的
acquaintance:   熟人
tapestry:       挂毯
antique:        古董
hoses:          水管
slip into:      陷入
crap:           粪便
pristinely:     未受损的
</code></pre>

<p>The most important factor that can contribute to software rot seems to be the psychology, or culture, at work on a project</p>
]]></content>
  </entry>
  
</feed>
