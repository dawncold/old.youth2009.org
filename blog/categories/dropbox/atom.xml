<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: dropbox | Trade Off]]></title>
  <link href="http://www.youth2009.org/blog/categories/dropbox/atom.xml" rel="self"/>
  <link href="http://www.youth2009.org/"/>
  <updated>2013-07-14T12:12:33+08:00</updated>
  <id>http://www.youth2009.org/</id>
  <author>
    <name><![CDATA[dawncold]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用python备份mysql]]></title>
    <link href="http://www.youth2009.org/blog/2012/04/27/backup-mysql-databases-using-python/"/>
    <updated>2012-04-27T20:44:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2012/04/27/backup-mysql-databases-using-python</id>
    <content type="html"><![CDATA[<p>备份数据库的重要性不想多说了。</p>

<pre class="prettyprint linenums bush:python" lang="python">#! /usr/bin/env python
# coding: utf-8

import os
import sys
from datetime import *
import time

#mysql's path
mysql_path = '/usr/local/mysql/bin/'
#edit this if your mysql username and password is not like this:
mysql_username = 'root'
mysql_password = 'xxxxxx'
#backup path
backup_path = 'mysqlbackup/'

def validate_backup_path():
if os.path.exists(backup_path) == False:
print "I create a directory here: %s " % backup_path
os.mkdir(backup_path)

def backup_all_databases():
filename = "all_%s.sql" % (datetime.utcfromtimestamp(time.time()))
os.system("%smysqldump -u%s -p%s --all-databases &gt; '%s%s'" % (mysql_path, mysql_username, mysql_password, backup_path, filename))

if __name__ == "__main__":
validate_backup_path()
backup_all_databases()
print "finish!!!"</pre>


<p>这个是修改了一次的备份脚本，本来是分数据库备份的，无奈制定了分数据库备份需要输入密码，这就不容易加入cron来自动完成了，不过听说在my.cnf中加入mysqldump的设置可以避免输入账号密码，这也算是一个办法吧，不过还是本着简化的思想，只导出所有数据库出来就好，配合着上一篇的dropbox自动备份，这样VPS的灾备就稍稍好些了：）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dropbox自动备份VPS]]></title>
    <link href="http://www.youth2009.org/blog/2012/04/27/auto-backup-data-in-vps-using-python-script-to-control/"/>
    <updated>2012-04-27T17:51:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2012/04/27/auto-backup-data-in-vps-using-python-script-to-control</id>
    <content type="html"><![CDATA[<p>在<a href="http://www.deepvps.com/dropbox-backup.html" target="_blank">这里</a>看过的文章，感觉很不错，于是发表过来，但发现有点问题，我就自己再改改。</p>

<p>安装linux下的dropbox（我的是32为系统，如果是64位在下面地址末尾加上“_64”即可）：</p>

<pre class="prettyprint linenums bush:bash" lang="bash">wget -O dropbox.tar.gz http://www.dropbox.com/download?plat=lnx.x86</pre>


<p>解压后在.dropbox-dist目录中有dropboxd可执行文件，让其在后台执行（就是在执行文件后面加“&amp;”符号）</p>

<pre class="prettyprint linenums bush:bash" lang="bash">~/.dropbox-dist/dropboxd &amp;</pre>


<p>此后会出现一个地址，你得复制出来然后在浏览器中打开，之后就是注册或者登陆dropbox，这样就激活了在这台机器上的dropbox，就可以同步文件了。</p>

<p>把需要同步备份的文件软连接到Dropbox这个目录中：</p>

<pre class="prettyprint linenums bush:bash" lang="bash">cd ~/Dropbox
ln -s /home/wwwroot/
。。。</pre>


<p>此时dropbox已经在帮你同步了，你可以通过web端观察。</p>

<p>我看到的文章中带着一个自动运行的脚本，用sh写的，我发现在主机上运行没反应，不会sh，会点python，于是我改写了一下，也是可用的：</p>

<pre class="prettyprint linenums bush:python" lang="python">#! /usr/bin/env python
# coding: utf-8

import sys
import os

def start():
print "Starting Dropbox..."
os.system("~/.dropbox-dist/dropboxd &amp;")


def stop():
print "Stoping Dropbox..."
os.system("pkill dropbox")


def restart():
stop()
start()


if __name__ == "__main__":
action = sys.argv[1]
print "now action: %s" % action
if action == 'start':
start()
elif action == "stop":
stop()
elif action == "restart":
restart()
else:
print "Bad arguments!"</pre>


<p>相应的crontab配置文件中这样写就好了：</p>

<pre class="prettyprint linenums bush:bash" lang="bash">#auto dropbox
0 4 * * * python /root/dropbox.py restart
0 5 * * * python /root/dropbox.py stop</pre>


<p>如果没装crontab（极少情况），这样(也许你用apt-get来做这件事，我的是centos系统，用yum了)：</p>

<pre class="prettyprint linenums bush:bash" lang="bash">yum -y install crontab</pre>


<p>python让我很快乐：）</p>

<p>一开始在python用的是exec来执行命令发现不可用，于是用了os.system，查看pydoc才发现exec是执行python code用的……惭愧！</p>
]]></content>
  </entry>
  
</feed>
