<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: dev | Trade Off]]></title>
  <link href="http://www.youth2009.org/blog/categories/dev/atom.xml" rel="self"/>
  <link href="http://www.youth2009.org/"/>
  <updated>2013-12-03T22:01:01+08:00</updated>
  <id>http://www.youth2009.org/</id>
  <author>
    <name><![CDATA[dawncold]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[timestamp]]></title>
    <link href="http://www.youth2009.org/blog/2013/08/20/timestamp/"/>
    <updated>2013-08-20T21:56:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/08/20/timestamp</id>
    <content type="html"><![CDATA[<p>今天在做批量导入图片功能的时候，发现一个问题，原先save image过程用timestamp当文件名，这样在一般使用的时候倒是没什么问题了，但让程序去做的时候，timestamp就显得不好用了，程序跑的很快，可能三四张图都在1s内处理完上传，这样就很难保证文件名不重复。</p>

<p>传一张停1秒呢？问题不大，但看着还是不保险，而且变慢了，因为要等。。。</p>

<p>纯粹uuid倒是问题不大，但日后管理起来确实就不爽了——看uuid根本不知道谁先谁后，所以就把tiemstamp和uuid4连起来当新文件名，这样程序批量传也不会有问题（其实概率已经低到这个时代可接受的程度吧），又在trade off了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[basestring-and-str-in-python2x]]></title>
    <link href="http://www.youth2009.org/blog/2013/08/08/basestring-and-str-in-python2x/"/>
    <updated>2013-08-08T21:39:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/08/08/basestring-and-str-in-python2x</id>
    <content type="html"><![CDATA[<p>今天在代码中发现原本过滤str的一个func被写成了过滤basestring，于是查了下basestring和str的区别：(在3.0之前)</p>

<p>```</p>

<pre><code>       object
         |
         |
     basestring
        / \
       /   \
     str  unicode
</code></pre>

<p>```</p>

<p>3.0之前python中有plain string和unicode string，前者是ascii中的那些字符，后者就是所有字符了，因为historical legacy。。。python出现的时候还木有unicode，所以很多python的lib是需要慢慢转换的，当然到了3.0就会不复存在了，全是unicode。</p>

<p>这样的话就清楚了，str代表了那些ascii字符，unicode就是全部的字符，他们都继承自basestring。basestring是从python2.3开始引入的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[use-change-event-on-checkbox]]></title>
    <link href="http://www.youth2009.org/blog/2013/07/26/use-change-event-on-checkbox/"/>
    <updated>2013-07-26T09:07:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/07/26/use-change-event-on-checkbox</id>
    <content type="html"><![CDATA[<p>昨天在一个table的第一行放了一个checkbox, 想做一个效果：一开始这个table的每一行都是冻结状态，点击这一行就激活了，顺便会把checkbox选中，当然直接点checkbox也会激活这一行。可惜在bind event的时候，分别给tr和checkbox加了click事件，tr的click会trigger到checkbox上，这样导致的结果就是点tr会触发checkbox的click handler，但同时又触发了tr的click handler，循环导致最后js崩溃。</p>

<p>后来发现在tr的click handler中检查event.target可以不触发这种死循环，但在checkbox click handler中使用prop判断checked状态不准，在stackoverflow中找到解答：jquery1.8中的 click()和真实的click是不一样的，应该在checkbox上用change event，然后一切ok。</p>

<p>解答：<a href="http://stackoverflow.com/questions/7668826/jquery-triggerclick-not-firing-click-event-on-checkbox">http://stackoverflow.com/questions/7668826/jquery-triggerclick-not-firing-click-event-on-checkbox</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[crontab a python script]]></title>
    <link href="http://www.youth2009.org/blog/2013/07/21/crontab-a-python-script/"/>
    <updated>2013-07-21T22:28:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/07/21/crontab-a-python-script</id>
    <content type="html"><![CDATA[<p>今天用python写了个<a href="https://github.com/dawncold/stuff/blob/master/ping_test.py">小程序</a>检测网络是否通断，如果断了就弹出一个Notification，当然是Mac上的，并且弹出一个terminal，带着执行ping www.baidu.com。</p>

<p>一开始用Lingon加入到启动项中并且打算2分钟执行一次，几经折腾终于失败，弃之。打算用crontab弄。</p>

<p>好歹算是可用了吧，注意的是：script的开头写/usr/bin/python，crontab中写PATH没用，得写PYTHONPATH才管用，而且我还写了MAILTO（现在不知道管什么用）。由于在script中用了popen，可能这个需要依赖一些环境或者是tty（这是从stackoverflow上看来的，具体可以搜popen crontab），现在想来launchd是不是也因为如此没能成功启动呢？（总提示255退出代码）</p>

<p>crontab:</p>

<p><code>bash
MAILTO="dawncold@me.com"
PATH=/Users/dawncold/.rvm/gems/ruby-1.9.3-p286/bin:/Users/dawncold/.rvm/gems/ruby-1.9.3-p286@global/bin:/Users/dawncold/.rvm/rubies/ruby-1.9.3-p286/bin:/Users/dawncold/.rvm/bin:/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/usr/local/MacGPG2/bin
PYTHONPATH=/usr/bin
* * * * * /Users/dawncold/ping_test.py &gt; /Users/dawncold/pt
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[suds-literal-soap]]></title>
    <link href="http://www.youth2009.org/blog/2013/07/08/suds-literal-soap/"/>
    <updated>2013-07-08T22:16:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/07/08/suds-literal-soap</id>
    <content type="html"><![CDATA[<p>SAP的接口就是和别人给的不一样，style为literal，最明显的地方就是operation中的参数是literal，原先的参数是一个object，按照原先的方法调用时发现传递过去的值都被放在了第一个参数中，很是不解。后来才知道这样的operation需要用keywords的那种传值方法——<code>**suds_client.dict(object)</code>，用suds的client的dict方法把构造的对象变成dict，再用<code>**</code>。</p>

<p>又被坑了一下。</p>
]]></content>
  </entry>
  
</feed>
