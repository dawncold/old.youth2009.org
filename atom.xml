<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Trade Off]]></title>
  <link href="http://www.youth2009.org/atom.xml" rel="self"/>
  <link href="http://www.youth2009.org/"/>
  <updated>2013-08-05T22:55:25+08:00</updated>
  <id>http://www.youth2009.org/</id>
  <author>
    <name><![CDATA[dawncold]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[opencv-with-pi]]></title>
    <link href="http://www.youth2009.org/blog/2013/08/03/opencv-with-pi/"/>
    <updated>2013-08-03T17:44:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/08/03/opencv-with-pi</id>
    <content type="html"><![CDATA[<p>想了好久都觉得连续拍照片做监控实在是没什么效率，默认情况应该是什么都不做，如果发现有人来了才拍下来或者录下来，但用标配的摄像头录像实在是会录出非常大的文件，保存文件又是问题。在<a href="http://www.raspberrypi.org/archives/4207">官网的博客</a>中看到了一个用opencv做的人脸识别，可以这样干嘛。于是紧随那片文章开始干。</p>

<p>由于标配摄像头模块不是usb设备，所以需要重新编译使用的几个程序，比如raspistill和raspivid等等。</p>

<p>另外，如果直接在raspberrypi上编译，需要安装一些软件：<a href="http://thinkrpi.wordpress.com/2013/04/05/step-3-install-softwares-for-webcam-and-computer-vision/">http://thinkrpi.wordpress.com/2013/04/05/step-3-install-softwares-for-webcam-and-computer-vision/</a></p>

<p>具体的操作请参照：<a href="http://thinkrpi.wordpress.com/2013/05/22/opencv-and-camera-board-csi/">http://thinkrpi.wordpress.com/2013/05/22/opencv-and-camera-board-csi/</a></p>

<p>替换arm-linux.cmake的命令:<code>sed -i 's/if (DEFINED CMAKE_TOOLCHAIN_FILE)/if (NOT DEFINED CMAKE_TOOLCHAIN_FILE)/g' arm-linux.cmake</code>，看准了arm-linux.cmake的路径，我运行命令的时候已经到了和arm-linux.cmake一个目录下了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[got-raspberry]]></title>
    <link href="http://www.youth2009.org/blog/2013/08/02/got-raspberry/"/>
    <updated>2013-08-02T21:40:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/08/02/got-raspberry</id>
    <content type="html"><![CDATA[<p>工资一发就买了块表。。。并且还狠心买了这个玩具——raspberry。</p>

<p>默认用了新手的那个镜像，叫NOOBS，就是里面装好了不少东西，系统也有好几个，默认用了推荐的Raspbian，是Debian的一个变种啦，开发用的Ubuntu都是一个家族的。</p>

<p>配置的话，没啥可说的，就是把显卡占用的内存改成了16Mb，默认似乎分配了128M过去，对于我这种总看命令行的人足够了。如果你和我一样买了官方的摄像头模块，那就可以把camera给enable了。再就是在adcanced options中把SSH打开，否则你还得连上键盘鼠标去操作。。。</p>

<p>不喜欢插网线，但很可惜办公室的Cisco双频无线网卡AE2500装不上，貌似是驱动问题，不想折腾，还好买了个免驱的小网卡叫EOUP。我的无线路由是hidden SSID了，所以在连接的时候还有点问题。在配置文件<code>/etc/wpa_supp/wpa_supp.conf</code>中多加了一行：
<code>scan_ssid=1</code></p>

<p>apt的source也改到了ustc.edu.cn的：<code>http://mirrors.ustc.edu.cn/raspbian/raspbian/</code>，具体就是把<code>/etc/apt/source.list</code>中第一行的URL改成上面那个即可。</p>

<p>camera的官方使用教程：<a href="http://www.raspberrypi.org/archives/3890">http://www.raspberrypi.org/archives/3890</a></p>

<p>如果想用camera捕捉视频，然后传到你这里看的话，需要在raspberry上先装netcat，我是用的Mac系统，系统本身有nc了，再用brew多装一个mplayer。</p>

<p>raspberrry上捕捉视频用：<code>raspivid -t 1000000 -vs -w 800 -h 600 -o -| nc 172.19.1.124 5001</code>，其中t参数指定了捕捉多少毫秒的视频，后面的vs是防抖，w和h控制宽高，这样就得到一个800x600的画面。</p>

<p>Mac上用nc把发来的stream转到mplayer上：<code>nc -lp 5001 | mplayer -fps 31 -cache 512 -</code>，很无语的是<code>man nc</code>得到一句解释，l和p参数在一起用是个错误，但不加p就绝对在我这里不work！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[internet protocol]]></title>
    <link href="http://www.youth2009.org/blog/2013/07/27/internet-protocol/"/>
    <updated>2013-07-27T23:02:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/07/27/internet-protocol</id>
    <content type="html"><![CDATA[<p>TCP, UDP, ICMP, IGMP need IP datagrams as data transmitting method.</p>

<p>IP is a unrealiable and connectionless delivery service.</p>

<ul>
<li>unrealiable: no guarantee that an IP datagram successfully get to its destination.</li>
<li>connectionless: IP doesn&rsquo;t maintain any state of successive datagrams, it means there is no order in IP datagrams, latter sent IP datagram may arrived before former sent.</li>
</ul>


<h2>Header</h2>

<p>TOS: 3 bits precedence field(ignored today), 4 bits TOS(mini delay, max throughput, max relability, mini monetary cost), 1 bit always 0. TOS maynot supported by most TCP/IP implementations today, but some routing protocol such as OSPF and IS-IS are capable of making routing decisions based on this field.</p>

<p>Furthermore, a host isn&rsquo;t required to receive a datagram larger than 576 bytes. TCP and UDP will divide user data into small pieces, so one IP datagram will below that limit.</p>

<p>Some small IP datagram will be padded up to the mini length of frame, which maybe 46 or 38 bytes, so total length field is required when you want to know how long the IP datagram&rsquo;s length on earth.</p>

<p>TTL: set by sender, if this datagram pass a router, it will decrease 1, when it reaches 0, this datagram will thrown away, and sender will received an ICMP message. prevent routing loop.</p>

<p>Checksum: TCP, UDP, ICMP, IGMP use same algorithm to computing checksum. Since a router often cheages only TTL value, a router can incrementally update the checksum when it forwards a datagram, instead of calculating the checksum over the entire IP header again.</p>

<h2>IP routing</h2>

<p>The fundamental difference is that a host never forward a datagram from one of its interface to another, while a router forwards datagram.</p>

<p>Router may reach a local optimum result, because every search route table, the router will get a closer next-hop router address, but it may not global optimum.</p>

<p>Frame&rsquo;s destination address(MAC address) may not the really destination address, it may the next-hop router&rsquo;s MAC address, because when it is routing, it can&rsquo;t be found in the current network, it must be routed to a next-hop router, so the destination address is the next-hop router&rsquo;s.</p>

<h2>Subnet addressing</h2>

<p>Don&rsquo;t forget subtract 2, because all 0 bits and all 1 bits address for host address is invalid.</p>

<p>The advantage to using s single class B address with 30 subnets, compared to 30 class C addresses, is that subnetting reduces the size of the Internet&rsquo;s routing tables entry.</p>

<p>A special address: 127.x.x.x means loopback address, not only 127.0.0.1 can be loopback address!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[link-layer]]></title>
    <link href="http://www.youth2009.org/blog/2013/07/27/link-layer/"/>
    <updated>2013-07-27T00:03:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/07/27/link-layer</id>
    <content type="html"><![CDATA[<h2>link layer</h2>

<h3>link layer&rsquo;s usage</h3>

<ol>
<li>send and receive IP datagram</li>
<li>ARP request and reply</li>
<li>RARP request and reply</li>
</ol>


<p>many different link layers, depending on the type of networking: ethernet, token ring, FDDI, RS232 serial lines, etc.</p>

<p>IEEE 802.2/3 format and Ethernet format</p>

<p>in 802 format, after 2 bytes length field, there are 3 bytes LLC and 5 bytes SNAP and data field(38~1492) but in Ethernet format, there will be data field(46~1500), the end field is 4 bytes CRC.</p>

<p>frame formats use 48-bits destination and source address</p>

<h2>SLIP: Serial Line IP</h2>

<p>END &mdash; 0xc0</p>

<p>SLIP ESC &mdash; 0xdb</p>

<p>IP datagram will be terminated by a special character called END(0xc0), most implementations transmit an END at the beginning of the datagram.</p>

<p>if a byte of IP datagram equals:</p>

<p>0xc0 &mdash;> 0xdb, 0xdc</p>

<p>0xdb&mdash;>0xdb, 0xdd</p>

<h2>PPP</h2>

<ol>
<li>async link with 8bits of data and no parity(no checksum)</li>
<li>bit-oriented sync links</li>
</ol>


<p>start and end with a flag byte whose value is 0x7e, and if a byte value appears in information field, it should be escaped.</p>

<p>batter than SLIP:(pay for 3 bytes addition)</p>

<ol>
<li>multiple protocols on a serial line</li>
<li>CRC</li>
<li>IP network control protocol negotiate IP address for each end</li>
<li>header compress like CSLIP</li>
<li>link control protocol negotiate many data-link options</li>
</ol>


<h2>Loopback</h2>

<p>127.0.0.1 or localhost is the loopback interface, an IP datagram sent to this must not appear on any network.</p>

<p>datagrams sent to broadcast and multicast addtess are copied to the loopback interface and sent out on the Ethernet.</p>

<p>anything sent to one of the host&rsquo;s own IP addresses is ent to the loopback interface!</p>

<h1>MTU</h1>

<p>if the length of data field in IP datagram is larger than MTU(1500 or 1492 in Ethernet and 802 format), it will be fragmented.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OCP-talks]]></title>
    <link href="http://www.youth2009.org/blog/2013/07/26/ocp-talks/"/>
    <updated>2013-07-26T22:27:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/07/26/ocp-talks</id>
    <content type="html"><![CDATA[<p>Good design should be open for extension and closed for modification. You can extend the module instead of modifying some working code.</p>

<p>Abstraction is the Key: for example, a Client should use an Server object that implemented some interfaces instead of a concrete Server object.</p>

<p>Interface&rsquo;s name should be named more closely associated to the dependent side instead of the implement side.</p>

<p>A function that is closed for modification: if we add some changes for this function, it must be modified for working right, it may unconform OCP. For example, a function that draw all shapes in a shape list, it should be draw shapes one by one, and don&rsquo;t care this shape should draw in this way, another shape should draw in that way, etc.</p>

<p>No matter how &ldquo;closed&rdquo; a module is, there will always be some kind of change against which it is not closed.</p>

<p>Abstraction may gain &ldquo;closed&rdquo; software entity(func, module, class, etc), but it also need trade off.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[crontab a python script]]></title>
    <link href="http://www.youth2009.org/blog/2013/07/21/crontab-a-python-script/"/>
    <updated>2013-07-21T22:28:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/07/21/crontab-a-python-script</id>
    <content type="html"><![CDATA[<p>今天用python写了个<a href="https://github.com/dawncold/stuff/blob/master/ping_test.py">小程序</a>检测网络是否通断，如果断了就弹出一个Notification，当然是Mac上的，并且弹出一个terminal，带着执行ping www.baidu.com。</p>

<p>一开始用Lingon加入到启动项中并且打算2分钟执行一次，几经折腾终于失败，弃之。打算用crontab弄。</p>

<p>好歹算是可用了吧，注意的是：script的开头写/usr/bin/python，crontab中写PATH没用，得写PYTHONPATH才管用，而且我还写了MAILTO（现在不知道管什么用）。由于在script中用了popen，可能这个需要依赖一些环境或者是tty（这是从stackoverflow上看来的，具体可以搜popen crontab），现在想来launchd是不是也因为如此没能成功启动呢？（总提示255退出代码）</p>

<p>crontab:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">MAILTO</span><span class="o">=</span><span class="s2">&quot;dawncold@me.com&quot;</span>
</span><span class='line'><span class="nv">PATH</span><span class="o">=</span>/Users/dawncold/.rvm/gems/ruby-1.9.3-p286/bin:/Users/dawncold/.rvm/gems/ruby-1.9.3-p286@global/bin:/Users/dawncold/.rvm/rubies/ruby-1.9.3-p286/bin:/Users/dawncold/.rvm/bin:/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/usr/local/MacGPG2/bin
</span><span class='line'><span class="nv">PYTHONPATH</span><span class="o">=</span>/usr/bin
</span><span class='line'>* * * * * /Users/dawncold/ping_test.py &gt; /Users/dawncold/pt
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[搭建4pm.la的数据库服务器]]></title>
    <link href="http://www.youth2009.org/blog/2013/07/04/build-4pm-env/"/>
    <updated>2013-07-04T21:54:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/07/04/build-4pm-env</id>
    <content type="html"><![CDATA[<p>原来用MySQL比较多，现在工作上主要用PostgreSQL，对于低级的应用来说，选什么数据库都差不多，但也要为以后发展做准备，不过我暂时看不到那么远，PG作为一个开源的数据库来说，还算是比MySQL有优势一点，所以就用这个了。</p>

<p>在Mac上安装的时候有个locale的选择，我选了这个：</p>

<p><img src="http://pic.yupoo.com/dawncold0/CZ9bpp9U/medish.jpg" alt="locale select" /></p>

<p>然后下载了pgAdmin作为GUI工具，结合PG的CLI一起使用比较好。使用psql登陆数据库可以用：<code>psql -h localhost -U postgres -W</code></p>

<pre><code>其中
-h db host
-U db user
-W use password
</code></pre>

<p>pgAdmin用起来感觉超差，目测是java写的，有点小卡，远不如在Ubuntu上的体验。</p>

<p>创建一个网站用的用户，可以用createuser这条命令，或者连上PG后写CREATE USER这种SQL，官方文档介绍两者没什么差别。createuser只是包装了一下SQL而已。（<a href="http://www.postgresql.org/docs/current/static/app-createuser.html">官方文档</a>）</p>

<p><code>createuser -dEeP -h localhost -U postgres -W xxx</code></p>

<pre><code>其中
-d can create db
-E encrypted user's password
-e echo SQL command
-P can not create role
</code></pre>

<p>创建一个数据库，同样可以用包装了CREATE DATABASE的createdb。(<a href="http://www.postgresql.org/docs/9.2/static/app-createdb.html">官方文档</a>）</p>

<p><code>createdb -e -E UTF8 -l zh_CN.UTF-8 -O OWNER -h localhost -U postgres -W DBNAME</code></p>

<pre><code>其中
-e echo SQL command
-E use encoding
-l set locale, included LC_COLLATE and LC_CTYPE
-O db's owner
</code></pre>

<p>看到篇不错的文章，介绍PG的ROLE、USER、SCHEMA、TABLESPACE、DATABASE等概念的关系：<a href="http://blog.csdn.net/kanon_lgt/article/details/5931522">这里</a></p>

<p>生产环境用的Ubuntu12.04.2，在创建数据库的时候制定locale，但没有zh_CN这个locale，于是需要安装：<code>/usr/shard/locales/install-language-pack zh_CN</code>，安装完了最好能重启机器，不然的话好像createdb一直会报错说zh_CN.UTF-8这个locale不正确。重启了之后再创建db就ok了，但告诉你说collection你选了zh_CN的，和默认模板template1的en_US冲突，提示是换成template0模板，于是加了参数<code>-T</code>:<code>createdb -e -E UTF8 -l "zh_CN.UTF-8" -O :OWNER -T template0 -h localhost -U postgres -W :DBNAME</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nginx-upload-file-without-backend]]></title>
    <link href="http://www.youth2009.org/blog/2013/06/25/nginx-upload-file-without-backend/"/>
    <updated>2013-06-25T23:09:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/06/25/nginx-upload-file-without-backend</id>
    <content type="html"><![CDATA[<p>以前用了nginx-upload-module，不过这个module的作者不打算继续更新了，导致nginx版本高于1.3.9就无法使用这个module来处理上传文件。本着不引入更多依赖并且使用一个比较成熟方法的前提，只有client_body_in_file_only，这是nginx buildin方法。</p>

<p>原本用upload-module的时候在location / 中有个if，如果发现有multipart就会处理一下，再pass回去。处理完后会多出两个参数，比如image.name和image.path，其中image是file input的name。然后back-end就直接那path和name来处理文件了，临时文件会放在一个固定的地方。</p>

<p>由于client_body_in_file_only只能放在server、http、location中，得专门建立一个location而不能放在if中。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>location ^~ /upload/ {
</span><span class='line'>  client_body_temp_path      /tmp/;
</span><span class='line'>  client_body_in_file_only   on;
</span><span class='line'>  client_body_buffer_size    128K;
</span><span class='line'>  client_max_body_size       1000M;
</span><span class='line'>
</span><span class='line'>  proxy_pass_request_headers on;
</span><span class='line'>  proxy_set_header           X-FILE $request_body_file; 
</span><span class='line'>  proxy_set_body             off;
</span><span class='line'>  proxy_redirect             off;
</span><span class='line'>  proxy_pass                 http://backend/
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这样以upload开头的就会做这样处理，上传的文件path会放在header中，至于name该怎么办，我是把name的值作为query string拼在了form的action中，在上传开始前得到文件名，然后拼上去。</p>

<p>需要注意的是，client_body_in_file_only不支持RFC2388，也就是说multipart不管用，你可以考虑用ajax上传插件来做上传，注意插件里的multipart设为false。上传插件推荐JQuery-File-Upload。</p>

<p>依赖，越少越好。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[some-sed-work]]></title>
    <link href="http://www.youth2009.org/blog/2013/06/15/some-sed-work/"/>
    <updated>2013-06-15T16:34:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/06/15/some-sed-work</id>
    <content type="html"><![CDATA[<p>博客内容是从wordpress转过来的，不可避免有很多地方没转换好，当时懒得弄，今天得空学习Shell编程，讲到了sed，就又搞了一下，基本满意了。</p>

<p>以前用sed替换过分类等简单的文字错误，今天主要是把一些html给替换掉了。</p>

<p>把<code>&lt;p&gt;</code>删掉，在删掉<code>&lt;/p&gt;以及&lt;br /&gt;</code>后面加换行等：</p>

<p><code>sed -i "" -e 's;&lt;/p&gt;;\'$'\n;g' *.markdown</code></p>

<p><code>sed -i "" -e 's;&lt;br /&gt;;\'$'\n;g' *.markdown</code></p>

<p>需要注意的是Mac OS中的sed和我看到的很不一样，所以这个替换都是特殊的，来自<a href="http://cafenate.wordpress.com/2010/12/05/newlines-in-sed-on-mac/">这里</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dog-pile-effect]]></title>
    <link href="http://www.youth2009.org/blog/2013/05/18/dog-pile-effect/"/>
    <updated>2013-05-18T22:48:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/05/18/dog-pile-effect</id>
    <content type="html"><![CDATA[<p>如果你的网站该去解决dog pile effect了，那应该有不小的PV了。今天看暴走漫画的架构设计，那是应对1000W PV的一个设计，当然架构这东西每家都不一样，可能这个就他们自己用着适合。里面提到了dog pile effect，这个的意思是：在多request去cache中拿数据的时候，如果发现自己拿的数据是过期了的，那么就要去db中拿新的来。这么看好像没问题，但有前提的——request很多，真的很多，而且确实用cache了（反正我不相信request很多的时候某些数据你不用cache，那得是个多么bt的db才能支撑啊？！）本来用cache的作用就是降低对某些slow query的执行次数，缓解db压力。但过期了，再去db中取这就和没有cache一样了，db会死的。</p>

<p>解决方法有这样的：</p>

<ul>
<li>有专门的job（比如crontab）来更新cache，这样request总是去cache取，不用管过不过期。好处就是简单；坏处是可能做一些没必要的重复计算，没有request你也更新了cache，而且你得确保这个job的执行时间要小于job的间隔，否则会积压很多job。</li>
<li>request取到数据发现过期，再请求一个update lock，成功拿到锁就可以更新cache，此时其他request也会请求这把锁，但就是请求不到，那就继续返回过期的数据。这是不容忍延迟的情况，如果对数据准确性要求高，那在updating的时候其他request会等，等数据更新了再返回。怎么用取决于environment。</li>
</ul>


<p>引用自：<a href = "http://hype-free.blogspot.jp/2008/05/avoiding-dogpile-effect.html"><a href="http://hype-free.blogspot.jp/2008/05/avoiding-dogpile-effect.html">http://hype-free.blogspot.jp/2008/05/avoiding-dogpile-effect.html</a></a>，注意blogspot。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ssh-proxy-with-autossh-in-mac]]></title>
    <link href="http://www.youth2009.org/blog/2013/05/11/ssh-proxy-with-autossh/"/>
    <updated>2013-05-11T13:10:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/05/11/ssh-proxy-with-autossh</id>
    <content type="html"><![CDATA[<p>在Mac下原来一直用iSSH，好处是简单，功能够用，但有个缺点很致命，ssh有时候会断开，谁知道最终是什么原因导致的，但iSSH不会自动重连，只是提示你。在忍受了很久之后换成了autossh，它没有GUI，但可以在ssh断开后自动重连。</p>

<p>1.使用brew安装autossh，或者用其他工具安装autossh，包括手。</p>

<p><code>brew install autossh</code></p>

<p>2.配置你的海外主机，保证你可以不用密码登陆。无非就是在authorized_keys中加入你的public key。自己用ssh登陆只要不用密码了就ok。</p>

<p>3.用autossh连接。</p>

<p><code>autossh -M 20000 -f -p REMOTEPORT -D LOCALPORT xxx@8.8.8.8 -N</code></p>

<p>autossh就3个参数，-M、-f、-V，其中-V是显示版本，其余两个参数的意思看<a href="http://www.harding.motd.ca/autossh/README" title="autossh README">文档描述</a>吧。</p>

<p>如果你没改远程主机ssh的默认端口，那就省略-p REMOTEPORT。</p>

<p>指定一个LOCALPORT，一般用什么1080，我用9998。</p>

<p>后面是ssh连接信息，最后-N表示port forward不用terminal交互。</p>

<p>4.(可选操作)如果你比较懒，希望login系统的时候自动帮你连接上ssh，Mac下使用launchd来做，推荐使用Lingon这个app，是个launchd的GUI。</p>

<p>添加一个My Agents就可以了，何时运行那里我勾选了at startup or login，生成的plist会放在~/Library/LaunchAgents/中，生成的内容如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
</span><span class='line'>&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
</span><span class='line'>&lt;plist version="1.0"&gt;
</span><span class='line'>&lt;dict&gt;
</span><span class='line'>&lt;key&gt;Label&lt;/key&gt;
</span><span class='line'>&lt;string&gt;autossh&lt;/string&gt;
</span><span class='line'>&lt;key&gt;ProgramArguments&lt;/key&gt;
</span><span class='line'>&lt;array&gt;
</span><span class='line'>&lt;string&gt;/usr/local/bin/autossh&lt;/string&gt;
</span><span class='line'>&lt;string&gt;-M&lt;/string&gt;
</span><span class='line'>&lt;string&gt;20000&lt;/string&gt;
</span><span class='line'>&lt;string&gt;-f&lt;/string&gt;
</span><span class='line'>&lt;string&gt;-p&lt;/string&gt;
</span><span class='line'>&lt;string&gt;9999&lt;/string&gt;
</span><span class='line'>&lt;string&gt;-D&lt;/string&gt;
</span><span class='line'>&lt;string&gt;9998&lt;/string&gt;
</span><span class='line'>&lt;string&gt;google@8.8.8.8&lt;/string&gt;
</span><span class='line'>&lt;string&gt;-N&lt;/string&gt;
</span><span class='line'>&lt;/array&gt;
</span><span class='line'>&lt;key&gt;RunAtLoad&lt;/key&gt;
</span><span class='line'>&lt;true/&gt;
</span><span class='line'>&lt;/dict&gt;
</span><span class='line'>&lt;/plist&gt;</span></code></pre></td></tr></table></div></figure>


<p>至此，开机自动连接ssh，自由surfing吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hhkb]]></title>
    <link href="http://www.youth2009.org/blog/2013/04/02/hhkb/"/>
    <updated>2013-04-02T23:01:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/04/02/hhkb</id>
    <content type="html"><![CDATA[<p>终于，它来了。</p>

<p><img src="http://pic.yupoo.com/dawncold0/CL0AxKWr/medish.jpg" alt="HHKB" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[be-blocked-by-GFW]]></title>
    <link href="http://www.youth2009.org/blog/2013/03/20/be-blocked-by-gfw/"/>
    <updated>2013-03-20T21:04:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/03/20/be-blocked-by-gfw</id>
    <content type="html"><![CDATA[<p>不知什么原因，我的VPS进入了全国路由监视节点。。。现实只要是谁打算ssh过去，就会被封锁一段时间。根据某人告知，这是进入短名单后的action，可以探测我换端口什么的操作，相信离IP被封已经不远了！</p>

<p>VPS啊，先提前和你说R.I.P.吧</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[end-sorted]]></title>
    <link href="http://www.youth2009.org/blog/2013/03/18/end-sorted/"/>
    <updated>2013-03-18T22:10:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/03/18/end-sorted</id>
    <content type="html"><![CDATA[<p>暂时终止sorted的开发，经历了两天痛苦的、没白没黑的、浑浑噩噩的探索后，还是没能搞定iPhone上一个icon的移动过程。实在不行我都打算直接去修改iconstate.plist文件了。。。但就是修改了不能马上响应，需要respring这点受不了！</p>

<p>网上这方面的资料依然少的可怜，很多时间竟然是花在寻找headers文件了，最后才知道根本不需要。你只要有headers拿来看看就ok了，需要什么类的声明自己用@interface写在xm文件中就可以了。tweak的远离是做出dylib后加载，替代系统的api，headers文件对于你来说就是看，然后找需要哪些私有api即可。</p>

<p>过两天兴致来了或许又再搞一下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[big-break-in-tweak-app-build]]></title>
    <link href="http://www.youth2009.org/blog/2013/03/17/big-break-in-tweak-app-build/"/>
    <updated>2013-03-17T09:15:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/03/17/big-break-in-tweak-app-build</id>
    <content type="html"><![CDATA[<p>昨晚弄到1点多也没搞定iOSOpenDev，总是编译出问题，在irc上问了一下也没人回答我，看来还是有很多人在泡irc的！</p>

<p>睡前又看了一下各种文章，等起床打算还是回归theos搞搞试试。</p>

<p>没想到早晨用theos搞了一下竟然ok了！或许是用对了theos的版本？不清楚了。</p>

<p>theos我删掉了原来的，用github上的版本</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git://github.com/DHowett/theos.git <span class="nv">$THEOS</span>
</span></code></pre></td></tr></table></div></figure>


<p>ldid我自己编译的，因为dropbox上的总是很难下载</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git://git.saurik.com/ldid.git
</span><span class='line'><span class="nb">cd </span>ldid
</span><span class='line'>git submodule update --init
</span><span class='line'>./make.sh
</span><span class='line'>cp -f ./ldid <span class="nv">$THEOS</span>/bin/ldid
</span></code></pre></td></tr></table></div></figure>


<p>有篇教程说在iOS上也安装perl和theos，我实在不清楚有什么用，不过我也安装了，蛋疼，具体方法看
<a href="http://iphonedevwiki.net/index.php/Theos/Getting_Started" target="_blank">这里</a></p>

<p>headers用这里的：<a href="https://github.com/rpetrich/iphoneheaders" target="_blank"><a href="https://github.com/rpetrich/iphoneheaders">https://github.com/rpetrich/iphoneheaders</a></a>
需要注意一点的是IOSurface这个framework，你需要增加一个新的头文件，在Mac系统中，可能还得注释掉两行，这取决于你是不是10.7版本的Mac系统。命令是：<code>cp /System/Library/Frameworks/IOSurface.framework/Headers/IOSurfaceAPI.h .</code>，在251和255行（我编译错误时候提示的就这两行），注释掉</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cm">/* This call lets you get an xpc_object_t that holds a reference to the IOSurface.</span>
</span><span class='line'><span class="cm">  Note: Any live XPC objects created from an IOSurfaceRef implicity increase the IOSurface&#39;s global use</span>
</span><span class='line'><span class="cm">  count by one until the object is destroyed. */</span>
</span><span class='line'><span class="c1">//xpc_object_t IOSurfaceCreateXPCObject(IOSurfaceRef aSurface)</span>
</span><span class='line'><span class="c1">//IOSFC_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_NA);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/* This call lets you take an xpc_object_t created via IOSurfaceCreatePort() and recreate an IOSurfaceRef from it. */</span>
</span><span class='line'><span class="c1">//IOSurfaceRef IOSurfaceLookupFromXPCObject(xpc_object_t xobj)</span>
</span><span class='line'><span class="c1">//IOSFC_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_NA);</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后做你的tweak就可以了，我按照经典的heloworld例子搞了个hook，springboard中applicationDidFinishLaunching弹出alert，成功了。</p>

<p>OS:10.8.3，SDKVERSION：6.1</p>

<p>另外昨天说的设置theos的环境变量，我今天又重新加到了bash_profile中，发现make package install都能自动部署了。。。看来真是昨天theos版本的问题？！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[open-development-env-for-xcode]]></title>
    <link href="http://www.youth2009.org/blog/2013/03/16/open-development-env-for-xcode/"/>
    <updated>2013-03-16T20:40:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/03/16/open-development-env-for-xcode</id>
    <content type="html"><![CDATA[<p>发现一个问题，使用theos这个makefile工具做app有很大困难，就是headers不好管理，真希望能集成到xcode中开发tweak，结果发现了一个神器&mdash;&mdash;iOSOpenDev。</p>

<p>安装好之后就能发现xcode中已经有很多可用的template了，对于tweak来说，有logos和CaptaionHook。logos就是theos，captainhook是另一个hook框架。</p>

<p>不过很可惜，可能是sdk6.1的问题，结合上springboard和uialertview后就从来没build success，总说armv7中的springboard link error或者uialertview linker error，是在不知道怎么办了，仔细又看了别人的做法，发现他们还在用sdk5.1，估计就是这点差异吧？</p>

<p>彻夜下载sdk5.1.。。。。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[build-up-env-for-sorted]]></title>
    <link href="http://www.youth2009.org/blog/2013/03/16/build-up-env-for-sorted/"/>
    <updated>2013-03-16T17:40:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/03/16/build-up-env-for-sorted</id>
    <content type="html"><![CDATA[<p>找到了一篇教程，开始构建jailbreaken app的环境。</p>

<p>基本需要的工具</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">THEOS</span><span class="o">=</span>/opt/theos
</span><span class='line'>svn co http://svn.howett.net/svn/theos/trunk <span class="nv">$THEOS</span>
</span><span class='line'>curl -s https://dl.dropboxusercontent.com/u/3157793/ldid &gt; <span class="nv">$THEOS</span>/bin/ldid; chmod +x <span class="nv">$THEOS</span>/bin/ldid
</span><span class='line'>brew install dpkg<span class="o">(</span>如果出错安不上dpkg，那就先update一下brew，我就遇到这么个问题<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>用theos模板创建项目，<code>$THEOS/bin/nic.pl</code>，这会在当前目录中创建你的项目，选择模板类型，然后起名字之类的，填好就ok。</p>

<p>在创见出来的项目中有Makefile，里面有一个地方需要注意，就是<code>xxxx_FILES=</code>这里，后面的m和mm文件是你当前所有的，如果你自己加了新的，你需要手动添加进去。</p>

<p>再加两个环境变量</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">SDKVERSION</span><span class="o">=</span>6.1
</span><span class='line'><span class="nb">export </span><span class="nv">THEOS_DEVICE_IP</span><span class="o">=</span>10.0.0.101
</span></code></pre></td></tr></table></div></figure>


<p>目标sdk版本，我用6.1了，后一个是手机的ip，自己弄到一个wifi中吧，后面部署需要。</p>

<p>make&amp;make package，在make的时候不加sudo我会无法make成功。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo make
</span><span class='line'>sudo make package
</span></code></pre></td></tr></table></div></figure>


<p>本目录下的deb就可以放到设备上安装了，安装命令是<code>dpkg -i xxx.deb</code></p>

<p>不过你可以用部署的方式，<code>make package install</code>，他会依赖你刚刚设置的IP部署，但我这里似乎有问题，估计是环境变量的问题，光提示我找不到THEOS_DEVICE_IP</p>

<p>我就scp到了设备上，手动执行了dpkg的命令，然后respring竟然没效果，只好reboot了一下，看到了刚刚的app已经被安装上了！！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[about-Sorted]]></title>
    <link href="http://www.youth2009.org/blog/2013/03/16/about-sorted/"/>
    <updated>2013-03-16T12:54:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/03/16/about-sorted</id>
    <content type="html"><![CDATA[<p>早就考虑做这么一个app，不过拖延到现在了，再次佩服一下我的拖延症。</p>

<p>Sorted是这样一个app，安装上之后就会跟踪你使用手机上app的习惯，根据使用频率给桌面的app排序，估计等你用一段时间之后，第一页的apps就是最常用的了。</p>

<p>当然，这需要你的iPhone jailbreaken。</p>

<p>刚刚用iFile找到了存放app list的地方，在/User/Library/SpringBoard/IconState.plist，plist就像是python中的dict，里面两个key分别是：buttonBar、iconLists。</p>

<p>buttonBar中有个list，是底部Dock上的app标识，例如有：com.apple.mobilephone、com.apple.MobileSMS等。</p>

<p>iconLists中又是一个list，内容也是list，每个list表示桌面某一页上的apps。</p>

<p>不过有个问题是：如果我手动修改了这里的值，比如我交换某页两个app的位置，回到桌面并不会立刻看到效果，如果要看效果，需要respring&hellip;就是重启SpringBoard，这是我不能接受的。需要再看SpringBoard的私有api有没有提供这方面的支持了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[generator-in-python]]></title>
    <link href="http://www.youth2009.org/blog/2013/03/13/generator-in-python/"/>
    <updated>2013-03-13T21:52:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/03/13/generator-in-python</id>
    <content type="html"><![CDATA[<p>今天在代码中遇到一个next方法（python代码），以前从没用过这个，于是简单了解了一下。</p>

<p>next就是iterator了，可以通过iterator来找东西，找到就停下了，如果给了默认值，没找到的话就用默认值。</p>

<p>generator这个东西是很有意思的，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">other_firstn</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'> <span class="n">num</span><span class="p">,</span> <span class="n">nums</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="p">[]</span>
</span><span class='line'> <span class="k">while</span> <span class="n">num</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">:</span>
</span><span class='line'>   <span class="n">nums</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'>   <span class="n">num</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'> <span class="k">return</span> <span class="n">nums</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以产生一个list，里面是按顺序的数字，有n个，结果类似于range(n)的返回值。</p>

<p>还有一个版本的firstn：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">firstn</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'> <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'> <span class="k">while</span> <span class="n">num</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">:</span>
</span><span class='line'>   <span class="k">yield</span> <span class="n">num</span>
</span><span class='line'>   <span class="n">num</span> <span class="o">+=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个看起来就很帅了，代码也简洁了很多，yield是十分神奇的表达式，产生了一个num，这里不太好想，不能按照正常的function来思考这个执行顺序了。</p>

<p>总之，如果产生100个数字，你可以一下子弄出100个来，或者你知道规则的话，你就弄出第一个来，然后用的时候按照规则，从第一个一直走下去，也产生了100个。最大的不同就是性能，后者必然速度更快了，前提是数量要足够多！写了一个简单的性能对比，主要是时间上的，内存上的不容易监控。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># /usr/bin/python</span>
</span><span class='line'><span class="c">#! -*- coding: utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">firstn</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'> <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'> <span class="k">while</span> <span class="n">num</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">:</span>
</span><span class='line'>   <span class="k">yield</span> <span class="n">num</span>
</span><span class='line'>   <span class="n">num</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">other_firstn</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'> <span class="n">num</span><span class="p">,</span> <span class="n">nums</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="p">[]</span>
</span><span class='line'> <span class="k">while</span> <span class="n">num</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">:</span>
</span><span class='line'>   <span class="n">nums</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'>   <span class="n">num</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'> <span class="k">return</span> <span class="n">nums</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">timer</span><span class="p">(</span><span class="n">func_wrap</span><span class="p">,</span> <span class="n">func</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwards</span><span class="p">):</span>
</span><span class='line'> <span class="n">s</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span><span class='line'> <span class="n">r</span> <span class="o">=</span> <span class="n">func_wrap</span><span class="p">(</span><span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwards</span><span class="p">))</span>
</span><span class='line'> <span class="n">e</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span><span class='line'> <span class="k">print</span> <span class="s">&#39;return: </span><span class="si">%s</span><span class="s">   use </span><span class="si">%f</span><span class="s"> ms[s: </span><span class="si">%s</span><span class="s">, e: </span><span class="si">%s</span><span class="s">]&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="p">(</span><span class="n">e</span> <span class="o">-</span> <span class="n">s</span><span class="p">),</span> <span class="n">s</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'> <span class="n">timer</span><span class="p">(</span><span class="nb">sum</span><span class="p">,</span> <span class="n">firstn</span><span class="p">,</span> <span class="mi">1000000</span><span class="p">)</span>
</span><span class='line'> <span class="n">timer</span><span class="p">(</span><span class="nb">sum</span><span class="p">,</span> <span class="n">other_firstn</span><span class="p">,</span> <span class="mi">1000000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'> <span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出结果是：大约会慢1倍</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>dawncold <span class="o">[</span>21:49:11<span class="o">]</span> ~<span class="o">=</span>&gt;<span class="nv">$ </span>python 1.py
</span><span class='line'><span class="k">return</span>: 499999500000   use 0.137414 ms<span class="o">[</span>s: 1363182552.38, e: 1363182552.52<span class="o">]</span>
</span><span class='line'><span class="k">return</span>: 499999500000   use 0.290716 ms<span class="o">[</span>s: 1363182552.52, e: 1363182552.81<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[set different password for amazon account]]></title>
    <link href="http://www.youth2009.org/blog/2013/02/20/set-different-password-for-amazon-account/"/>
    <updated>2013-02-20T00:16:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/02/20/set-different-password-for-amazon-account</id>
    <content type="html"><![CDATA[<p>不知怎么，突然发现在iPad上注册kindle设备后，在国内的amazon上无法看到这个设备，云端购买的书籍也都没了，深夜给amazon发了邮件，没想到十几分钟就回复了！！！</p>

<p>得知，如果在amazon美国用了和国内相同的账号，那注册设备的时候可能会被使用美国的数据，那里当然木有我买的书了。。。看来以后kindle要暂时和国际市场say byebye了。</p>

<p>解决方法就是给国内外这两个账号设置不同的密码，试了一下，解决！</p>
]]></content>
  </entry>
  
</feed>
