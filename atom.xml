<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[dawncold's tech blog]]></title>
  <link href="http://www.youth2009.org/atom.xml" rel="self"/>
  <link href="http://www.youth2009.org/"/>
  <updated>2013-01-20T22:00:29+08:00</updated>
  <id>http://www.youth2009.org/</id>
  <author>
    <name><![CDATA[dawncold]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[merge partition got Couldn’t modify partition map because file system verification failed error]]></title>
    <link href="http://www.youth2009.org/blog/2013/01/20/merge-partition-got-couldnt-modify-partition-map-because-file-system-verification-failed-error/"/>
    <updated>2013-01-20T19:36:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/01/20/merge-partition-got-couldnt-modify-partition-map-because-file-system-verification-failed-error</id>
    <content type="html"><![CDATA[<p>前几天需要把本机的VMware虚拟机文件拷到工作机器上用，但文件比较大，有30G，U盘不行，无线共享太慢，网线直连无奈工作机器百兆网卡不给力还是慢，分割了我的TimeMachine备份盘，但用完后再合并划分出去的分区就出问题了，提示：</p>

<pre><code>Couldn’t modify partition map because file system verification failed error
</code></pre>

<p>此时可以Verify一下这个硬盘，如果有错误就repair，相信这里没问题的都应该可以再合并了吧，我这里还是出问题了，在提示repair complete之后出现了一个错误，好像是boot什么的错误，建议我reformat，再弄backup file，backup file too many？？记不清楚了，再合并一次分区，不行的话果断erase掉，再backup，反正现在backup都用不上，趁着清理一下也好。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gets method in ruby]]></title>
    <link href="http://www.youth2009.org/blog/2013/01/03/gets-method-in-ruby/"/>
    <updated>2013-01-03T20:40:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/01/03/gets-method-in-ruby</id>
    <content type="html"><![CDATA[<p><strong>Important</strong>: Also notice that we&#8217;re using STDIN.gets instead of plain &#8216;ol gets. That is because if there is stuff in ARGV, the default gets method tries to treat the first one as a file and read from that. To read from the user&#8217;s input (i.e., stdin) in such a situation, you have to use it STDIN.gets explicitly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby学习记录]]></title>
    <link href="http://www.youth2009.org/blog/2013/01/01/some-ruby-study-log/"/>
    <updated>2013-01-01T08:22:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/01/01/some-ruby-study-log</id>
    <content type="html"><![CDATA[<p>在wanglei的鼓动下，我开始了探寻Ruby这款被他成为做产品的语言，同时，Ruby对我来说也是上天的安排——我的生日石就是Ruby～虽然如此，其实我早就开始了Ruby的探索，曾经买过《松本行弘的程序世界》、《Ruby变成语言》这两本很好的书，无奈当时怎么看也看不进去，就暂且放弃了，相反，更喜欢了Python。</p>

<p>最近的工作语言一直是Python，感觉很好，不过Ruby对我来说更显得优美一点，主要是喜欢他们的文档，非常全面，但不喜欢TA的快速变更，特别是ROR，当时买的书和网上的版本很难契合，我又不那么喜欢用低版本的ROR，学起来就痛苦一点，最终还是放弃了。</p>

<p>前几天看到Learn Python the Hard Way发布了3.0版，同时网站也更名为Learn Code the Hard Way，十分符合技术人士的胃口，当然用来入门还是可以的，深入的话还是得靠自己阅读更高级的书和工作实践。这个网站现在也有Ruby、C、Regex、SQL等等教程，于是在没有书的情况下，我就从这里学习Ruby了。</p>

<p>现在已经学了基本的puts和gets，能写超小的CLI了，不过还得学点loop什么的才可以，而且各种object的method也得熟悉，否则很痛苦：（</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给开源项目做贡献了]]></title>
    <link href="http://www.youth2009.org/blog/2012/12/19/make-a-contribution-to-open-source-project/"/>
    <updated>2012-12-19T21:18:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2012/12/19/make-a-contribution-to-open-source-project</id>
    <content type="html"><![CDATA[<p>惭愧，第一次给开源项目做贡献竟然是现在，其实早就想帮着做点啥了，无奈技术能力不足，终于发现一个机会，给progit的README文档添加MacOS用户的使用方式，可惜噩梦也是这样开始的。</p>

<p>一开始添加了usage for macos users，commit然后push，作者和我说少一个blank line，我加了再commit和push，另一个开发者和我说你不应该多次commit，需要说清楚commit的工作而不是一味用commit修改，我改好了发现remote的版本和本地不一样，因为我是在上一个版本的基础上amend后再提交的，无奈之下我merge了remote然后commit又push，这时候作者跳出来一对一教我怎么做了，有不少细节地方需要注意，比如完全的command line可以在markdown中用tab的indent，而list的indent和tab是完全不一样的。。。又给我罗列了markdown的语法。我让他写一个正确的给我看一下，他真的就给我写了一遍，但是他给希望让别人来做这部分工作而不是自己来做，并不是自己能力不足什么的，光是在我这里付出的时间就远超编辑好几个版本的README了。这点在国内开发者的身上很难发现吧？！</p>

<p>最后当然是pull request被接受了：）这次经历很难得！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我在考虑迁移到octopress上]]></title>
    <link href="http://www.youth2009.org/blog/2012/11/25/thinking-convert-to-octopress-blog-system/"/>
    <updated>2012-11-25T21:51:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2012/11/25/thinking-convert-to-octopress-blog-system</id>
    <content type="html"><![CDATA[<p>最近的work@honovation博客一直是用octopress写的，就是直接写markdown内容即可，github负责转换并提供托管服务，而且可以自己绑定域名，比如现在的http://workathonovation.youth2009.org就是这么弄得，非常简洁的方式，而且有种回归本真的感觉。</p>

<p>迟迟没有动作是因为我付了30刀个这个VPS，也就是到2月才过期，如果全部转到了octopress那么空着这个VPS干嘛？翻墙玩？呵呵，那真是无聊死了吧。。。说实在的，vps除了放个blog和自己做出来的小站外，好像就没什么用处了，但现在自己连小站都没有了，悉数关闭。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pytz的6分钟时差]]></title>
    <link href="http://www.youth2009.org/blog/2012/10/20/6-minutes-offset-in-pytz/"/>
    <updated>2012-10-20T16:13:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2012/10/20/6-minutes-offset-in-pytz</id>
    <content type="html"><![CDATA[<p>项目中有使用pytz这个第三方库来处理datetiem相关的东西。不过最近测试的时候发现，创建了一个时间点后，最终得到的时间点和预想的时间点有6分钟的误差，从网上搜到的资料是这样解决的：详情看http://hi.baidu.com/limodou/item/72da32384b25c7ff97f88df1</p>

<p>创建datetime的时候，特别是带timezone，需要localize一下，否则在使用pytz的时候就会出现这6分钟的差异。代码中首先创建了datetime，然后localize后再replace了timezone为pytz的，最终还astimezone为pytz.utc。我们是使用utc的，你的代码也许不需要：）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NAT实践]]></title>
    <link href="http://www.youth2009.org/blog/2012/10/09/nat-practical/"/>
    <updated>2012-10-09T14:09:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2012/10/09/nat-practical</id>
    <content type="html"><![CDATA[<p>昨天用LXC建立了不少container，分别用来做webserver、databaseserver等等，让这些container运行着各自程序启动后如果有外部访问，就会通过iptables把请求发送到各自的地方，这里需要宿主机器做NAT。比如访问80端口，我会把请求转发到内部10.0.3.20这台container来处理，相应的response也会返回过去。这样就做到了服务隔离。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo iptables -t nat -A PREROUTING -i eth1 -p tcp --dport 80 -j DNAT --to 10.0.3.20
</span><span class='line'>sudo iptables -t nat -A POSTROUTING -o eth1 -s 10.0.3.20 -j SNAT --to 200.200.200.25
</span></code></pre></td></tr></table></div></figure>


<p>这样就把进入的请求都发到了10.0.3.20这台container上去处理。</p>

<p><img src="http://pic.yupoo.com/dawncold0/CkkIbzDr/medish.jpg" alt="nat" /></p>

<p>只默认开了一个nginx，就这样的效果。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LXC实践]]></title>
    <link href="http://www.youth2009.org/blog/2012/10/08/lxc-practical/"/>
    <updated>2012-10-08T20:46:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2012/10/08/lxc-practical</id>
    <content type="html"><![CDATA[<p>这里的LXC是基于Ubuntu12.04的，在其他系统下可能不太一样。</p>

<p>0.安装lxc</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install lxc
</span></code></pre></td></tr></table></div></figure>


<p>1.修改lxc的mirror，不修改的话下载一个ubuntu景象会非常慢！！！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo emacs /etc/default/lxc
</span><span class='line'>第三行的mirror注释去掉，并修改为cn.archive.ubuntu.com，这样就非常快了
</span></code></pre></td></tr></table></div></figure>


<p>2.创建lxc容器，t表示模板中的名字，n表示这个容器的名字（可自定义）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo lxc-create -t ubuntu -n ubuntu_container
</span></code></pre></td></tr></table></div></figure>


<p>3.启动容器</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo lxc-start -n ubuntu_container
</span></code></pre></td></tr></table></div></figure>


<p>启动后就会出现登录ubuntu的界面，刚刚创建好容器后会给出一个提示，帐号密码都是ubuntu，登录进去就可以使用了。</p>

<p>猜想lxc的用法可能是对于部署的某个进程使用lxc隔离，这并不能做vps用，lxc只是轻量虚拟化，针对进程来的，所以还是单机在使用，如果做vps就得用vmware、xen、openvz这样的东西了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LVM+RAID实践]]></title>
    <link href="http://www.youth2009.org/blog/2012/10/08/lvm-and-raid1/"/>
    <updated>2012-10-08T14:09:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2012/10/08/lvm-and-raid1</id>
    <content type="html"><![CDATA[<p>两块256Gb SSD，做RAID1，用LVM管理，方便日后动态扩容等。</p>

<p>0.分区，因为是SSD，需要注意4K对齐问题，否则对SSD的寿命和性能有影响：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>fdisk /dev/sda
</span><span class='line'>fdisk /dev/sdb
</span></code></pre></td></tr></table></div></figure>


<p>1.创建PV</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo pvcreate /dev/sd<span class="o">{</span>a1,b1<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>2.创建VG</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo vgcreate -s 16M vg0 /dev/sd<span class="o">{</span>a1,b1<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>3.创建LV</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo lvcreate -n lv0 vg0 -m 1 -lxxxx --corelog
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[统计词频方法]]></title>
    <link href="http://www.youth2009.org/blog/2012/10/04/print-words-count/"/>
    <updated>2012-10-04T18:32:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2012/10/04/print-words-count</id>
    <content type="html"><![CDATA[<p>记得上次参加美味书签电面的时候被问到如何统计一个语料库中的词频，当时有点傻，刚刚在复习Python的dict也遇到了这样的问题，一下子认识到，原来可以做得这么简单。虽然不知道有没有更爽的办法，但我觉得我这种方法也算是能用了，能够保证一定效率的情况下，可理解性也很强。</p>

<p>读取一行行的word，存入dict，word作为key，value就是出现次数了，这样都是linear的事件复杂度，如果在字典就把value加1，要是不在就把value设为1即可。dict的查找复杂度很低，是hash查找。</p>

<p>唉，会不会就是这样我才被拒掉了呢？！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python中dict格式化]]></title>
    <link href="http://www.youth2009.org/blog/2012/10/04/dict-formatting-in-python/"/>
    <updated>2012-10-04T17:54:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2012/10/04/dict-formatting-in-python</id>
    <content type="html"><![CDATA[<p>最近在工作中遇到过写SQL的问题，参数是直接传递进去的，比如这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">db</span><span class="p">()</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s">&#39;SELECT * FROM xxx WHERE id = </span><span class="si">%(id)s</span><span class="s">&#39;</span><span class="p">,</span> <span class="nb">id</span><span class="o">=</span><span class="n">get_id</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>今天细看Google提供的Python课程发现一个叫DictFormatting的部分，里面就有类似这样的语法，现在才明白。以前用过Python的格式化输出，其实这个dict的格式化和字符串的类似，就是在字符串格式化的基础之上加入了dict的key，%s是表示这里有字符串，而%(xxx)s是表示字符串，而且是以xxx为key的字符串，这个value就是从字典中给出。一半会在这样一个字符串后加“% dictname”表示值从dictname这个字典中给出，这不就是和字符串格式化一样么。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python中的sort方法]]></title>
    <link href="http://www.youth2009.org/blog/2012/10/04/sort-method-in-python/"/>
    <updated>2012-10-04T14:58:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2012/10/04/sort-method-in-python</id>
    <content type="html"><![CDATA[<p>打算从今天开始自习再学学Python的基础，选了Google提供的Python课程，学到list部分，有个练习题目要求针对一组tuples排序，根据tuples的最后一个元素排序，有个hint，可以用key=function这种方法，于是搜索了一番，在Python的wiki中找到这个key方法的描述：</p>

<p>从Python2.4以后list.sort()和sorted()方法都提供了一个key可选参数，传入一个function用来决定排序需要的key。这个key就是所排序元素的权值，最终就是根据权值来排序了。你也可以自己写一个方法，就是那种用def来定义的方法，不过要求接受一个参数，返回一个值，接受的参数就是这个集合（list、dict、tuple）中的某个元素。我是这样写的，it works：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">sort_last</span><span class="p">(</span><span class="n">tuples</span><span class="p">):</span>
</span><span class='line'>  <span class="c"># +++your code here+++</span>
</span><span class='line'>  <span class="n">tuples</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">t</span><span class="p">:</span> <span class="n">t</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">tuples</span>
</span></code></pre></td></tr></table></div></figure>


<p>根据tuple中最后一个排序。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[M4的一点优化]]></title>
    <link href="http://www.youth2009.org/blog/2012/10/01/optimzation-for-m4/"/>
    <updated>2012-10-01T17:05:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2012/10/01/optimzation-for-m4</id>
    <content type="html"><![CDATA[<p>1.关闭紧急运动传感器</p>

<p>mac系统没有把这些传感器的设置、界面什么的体现到UI里，让我一度以为mbp没有这种设备，实际这也算是mac系统的设计理念吧，把普通用户无须知晓的东西屏蔽掉，让用户看起来、用起来异常简单，不像thinkpad那样，直接把硬盘活动保护啥的做成一个功能给用户展示。。。你看，你看，我们（thinkpad）有保护您硬盘的设备。。。</p>

<p>这些不让用户看到的功能大多需要相关工具或者命令行来设置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo pmset -a sms 0&lt;/pre&gt;
</span></code></pre></td></tr></table></div></figure>


<p>对于替换了原来硬盘的这种方案就可以关闭紧急运动传感器了，如果加了SSD在光驱位，那就甭管了，继续保护硬盘吧！</p>

<p>2.开启Trim</p>

<p>同样要使用命令行开启，有个app叫Trim Enabler，但不推荐用。也有呼声说M4带有GC功能，是不是不需要开Trim了，综合不少资料考虑，还是推荐开起来。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>备份
</span><span class='line'>sudo cp /System/Library/Extensions/IOAHCIFamily.kext/Contents/PlugIns/IOAHCIBlockStorage.kext/Contents/MacOS/IOAHCIBlockStorage /System/Library/Extensions/IOAHCIFamily.kext/Contents/PlugIns/IOAHCIBlockStorage.kext/Contents/MacOS/IOAHCIBlockStorage.original&lt;/pre&gt;
</span><span class='line'>&lt;br /&gt;10.8.1 or 10.7.5 or newer
</span><span class='line'>sudo perl -pi -e <span class="s1">&#39;s|(\x52\x6F\x74\x61\x74\x69\x6F\x6E\x61\x6C\x00{1,20})[^\x00]{9}(\x00{1,20}\x4D)|$1\x00\x00\x00\x00\x00\x00\x00\x00\x00$2|sg&#39;</span> /System/Library/Extensions/IOAHCIFamily.kext/Contents/PlugIns/IOAHCIBlockStorage.kext/Contents/MacOS/IOAHCIBlockStorage
</span></code></pre></td></tr></table></div></figure>


<p>10.8.0 or 10.7.4 or below</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo perl -pi -e <span class="s1">&#39;s|(\x52\x6F\x74\x61\x74\x69\x6F\x6E\x61\x6C\x00{1,20})[^\x00]{9}(\x00{1,20}\x51)|$1\x00\x00\x00\x00\x00\x00\x00\x00\x00$2|sg&#39;</span> /System/Library/Extensions/IOAHCIFamily.kext/Contents/PlugIns/IOAHCIBlockStorage.kext/Contents/MacOS/IOAHCIBlockStorage
</span></code></pre></td></tr></table></div></figure>


<p>清除系统内核扩展缓存</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo touch /System/Library/Extensions/
</span></code></pre></td></tr></table></div></figure>


<p>重启</p>

<p>如果想禁止Trim</p>

<p>FOR ML 10.8.1 AND LION 10.7.5 OR NEWER</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo perl -pi -e <span class="s1">&#39;s|(\x52\x6F\x74\x61\x74\x69\x6F\x6E\x61\x6C\x00).{9}(\x00\x4D)|$1\x41\x50\x50\x4C\x45\x20\x53\x53\x44$2|sg&#39;</span> /System/Library/Extensions/IOAHCIFamily.kext/Contents/PlugIns/IOAHCIBlockStorage.kext/Contents/MacOS/IOAHCIBlockStorage
</span></code></pre></td></tr></table></div></figure>


<p>FOR ML 10.8.0 AND LION 10.7.4 BELOW</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo perl -pi -e <span class="s1">&#39;s|(\x52\x6F\x74\x61\x74\x69\x6F\x6E\x61\x6C\x00).{9}(\x00\x51)|$1\x41\x50\x50\x4C\x45\x20\x53\x53\x44$2|sg&#39;</span> /System/Library/Extensions/IOAHCIFamily.kext/Contents/PlugIns/IOAHCIBlockStorage.kext/Contents/MacOS/IOAHCIBlockStorage
</span><span class='line'>
</span><span class='line'>sudo touch /System/Library/Extensions/
</span></code></pre></td></tr></table></div></figure>


<p>如果出错就恢复刚刚的备份</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo cp /System/Library/Extensions/IOAHCIFamily.kext/Contents/PlugIns/IOAHCIBlockStorage.kext/Contents/MacOS/IOAHCIBlockStorage.original /System/Library/Extensions/IOAHCIFamily.kext/Contents/PlugIns/IOAHCIBlockStorage.kext/Contents/MacOS/IOAHCIBlockStorage
</span></code></pre></td></tr></table></div></figure>


<p>3.用noatime方式挂载硬盘，就是少加载一个文件属性参数而已，对于日常使用没啥影响，在/Library/LaunchDaemons里面创建一个noatime.plist，内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot;</span>
</span><span class='line'><span class="cp">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
</span><span class='line'><span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;dict&gt;</span>
</span><span class='line'><span class="nt">&lt;key&gt;</span>Label<span class="nt">&lt;/key&gt;</span>
</span><span class='line'><span class="nt">&lt;string&gt;</span>noatime<span class="nt">&lt;/string&gt;</span>
</span><span class='line'><span class="nt">&lt;key&gt;</span>ProgramArguments<span class="nt">&lt;/key&gt;</span>
</span><span class='line'><span class="nt">&lt;array&gt;</span>
</span><span class='line'><span class="nt">&lt;string&gt;</span>mount<span class="nt">&lt;/string&gt;</span>
</span><span class='line'><span class="nt">&lt;string&gt;</span>-vuwo<span class="nt">&lt;/string&gt;</span>
</span><span class='line'><span class="nt">&lt;string&gt;</span>noatime<span class="nt">&lt;/string&gt;</span>
</span><span class='line'><span class="nt">&lt;string&gt;</span>/<span class="nt">&lt;/string&gt;</span>
</span><span class='line'><span class="nt">&lt;/array&gt;</span>
</span><span class='line'><span class="nt">&lt;key&gt;</span>RunAtLoad<span class="nt">&lt;/key&gt;</span>
</span><span class='line'><span class="nt">&lt;true/&gt;</span>
</span><span class='line'><span class="nt">&lt;/dict&gt;</span>
</span><span class='line'><span class="nt">&lt;/plist&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>修改刚刚创建的文件权限</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo chown root:wheel /Library/LaunchDaemons/noatime.plist
</span></code></pre></td></tr></table></div></figure>


<p>重启</p>

<p>检测结果</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mount | grep <span class="s2">&quot; / &quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果结果里有类似这样的内容（最后的noatime）就表示可以了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/dev/disk0s2 on / <span class="o">(</span>hfs, <span class="nb">local</span>, journaled, noatime<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[买了个叫M4的硬盘]]></title>
    <link href="http://www.youth2009.org/blog/2012/10/01/bought-a-ssd-called-m4/"/>
    <updated>2012-10-01T14:05:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2012/10/01/bought-a-ssd-called-m4</id>
    <content type="html"><![CDATA[<pre><code>        &lt;p&gt;256Gb，1200块。&lt;/p&gt;
</code></pre>

<p>速度还不错，读取260Mb/s，写入206Mb/s。</p>


<p>至此，MC374能升级的部分都升级到位了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[247条垃圾评论]]></title>
    <link href="http://www.youth2009.org/blog/2012/09/23/247-rubbish-comments/"/>
    <updated>2012-09-23T21:24:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2012/09/23/247-rubbish-comments</id>
    <content type="html"><![CDATA[<pre><code>        &lt;p&gt;疏于管理啊，让各路垃圾评论之小人得了空，钻到这里写了那么多，还好spam插件够给力，全部截获。以后不该再这样了，但也是没什么时间。&lt;/p&gt;
</code></pre>

<p>去了honovation之后发觉自己写过的代码基本就不叫代码啊，自觉的对python算是熟悉的，到了那里也感觉从没写过python了，怪我平日光想着感情来感情去了，就和我这技术blog似的，疏于管束，才弄得我今天这个结果。</p>


<p>现在比较感兴趣的是敏捷实践，看书上网上的资料毕竟比较浮华，身处于敏捷团队，每天都在做得就是最好的实践，怪我一时还不太会总结，现在好像又要深陷到代码里了，我这个程序员何时能成长？！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jquery1.6+中的prop方法]]></title>
    <link href="http://www.youth2009.org/blog/2012/08/18/prop-method-in-jquery1-6-or-later/"/>
    <updated>2012-08-18T19:27:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2012/08/18/prop-method-in-jquery1-6-or-later</id>
    <content type="html"><![CDATA[<pre><code>        &lt;p&gt;最近有个网站需要一个简单的功能——全选一些checkbox，但用attr的方法总是出问题，主要问题如下：第一次全选没问题，如果此时取消选择一些checkbox，再用全选就不管用了，主要原因就是第一次全选的时候自动加入了checked属性，以后再强制attr("checked",true)就会没反应。在&lt;a href="http://blog.csdn.net/yaerfeng/article/details/7792832"&gt;这里&lt;/a&gt;看到一篇文章，里面提到了prop方法，是1.6以后才加入的，就是部分替换了attr的功能，用了prop就可以及时对操作做出反应（这里我不太理解），总之本来用attr的操作现在需要用prop才有效果，当然了，如果你用纯js肯定是没问题喽。&lt;/p&gt;
</code></pre>

<p>换用prop之后，问题解决！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[终于又回到了开发一线]]></title>
    <link href="http://www.youth2009.org/blog/2012/08/09/return-to-develop/"/>
    <updated>2012-08-09T10:45:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2012/08/09/return-to-develop</id>
    <content type="html"><![CDATA[<pre><code>        &lt;p&gt;前两天把系统从Lion升级到了MountainLion，这一升级不要紧，很多开发环境都需要重装，比如Java又得重新下载，Python的类库又消失了，XCode过期了。。。&lt;/p&gt;
</code></pre>

<p>听说了一个好消息，从XCode4.4.1开始，以后的XCode都会采用增量更新，但这次除外，1.56Gb的XCode，在这种破网速中用了两天才搞定。</p>


<p>Python的一个类库MySQL-python需要gcc-4.2才能编译，于是还需要下载CommandLineTool，又是155Mb。。。（但装好XCode后可以从XCode.app中找到llvm-gcc-4.2，我是用这个编译的，也能用）。</p>


<p>还有几个小的python类库，装好后就能继续用了。这次系统升级后MySQL竟然没有问题，值得表扬一下！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[生产环境下的flask调试]]></title>
    <link href="http://www.youth2009.org/blog/2012/07/17/flask-debug-in-production-environment-with-uwsgi/"/>
    <updated>2012-07-17T09:36:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2012/07/17/flask-debug-in-production-environment-with-uwsgi</id>
    <content type="html"><![CDATA[<p>生产环境是：nginx+uwsgi+flask+sqlalchemy等等等</p>

<p>自带的调试功能比较好用，也能很方便的查看各种变量的值，不过在生产环境中调试并不是那么容易。需要在uwsgi开启的时候传入“&#8211;catch exceptions”：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>uwsgi -s :9090 -M -p 4 -t 30 --limit-as 128 -R 10000 -d uwsgi.log --vhost --catch-exceptions
</span></code></pre></td></tr></table></div></figure>


<p>在flask的app中要设置config中的PROPAGATE_EXCEPTIONS = True才可以在遇到错误的时候直接输出到页面上。</p>

<p>昨晚部署到服务器中，发现好多地方是500号错误，根本不知道在哪里出的错误，今天打开了这些才发现是jinja2模板中的do方法不识别，原来我把这个加载do操作放在了比较靠后的地方，在生产环境下不会去调用app了，所以原本写在<code>if __name__ == "__main__"</code>里面的东西就不会再调用了：）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQLAlchemy中的乱码]]></title>
    <link href="http://www.youth2009.org/blog/2012/07/14/bad-encoding-in-sqlalchemy/"/>
    <updated>2012-07-14T09:47:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2012/07/14/bad-encoding-in-sqlalchemy</id>
    <content type="html"><![CDATA[<pre><code>        &lt;p&gt;一开始没怎么关心这个问题，连接数据库的时候我直接这样用的：&lt;/p&gt;
</code></pre>

<br /><pre class="prettyprint linenums bush:python" lang="python">mysql://root:@localhost/haolesong</pre>


<br /><p>在插入数据的时候看到数据库中的内容是乱码，但网页中显示的时候正常，于是我就没怎么关心，不过前天在修改一个值的时候，就是用一段中文替换原先的值，提交数据后网页打不开了，提示unicode编码的xxx问题，相信用Python写网站的人应该会遇得到。</p>


<p>后来在<a href="http://meizhini.iteye.com/blog/294691" target="_blank">这里</a>发现了解决方法，还有一段长长的分析。我很喜欢这样的文章，对于想直接知道问题答案的人来说一目了然，想知道原理的人也可以直接看下去。</p>


<p>最终就是这样即可：</p>


<br /><pre class="prettyprint linenums bush:python" lang="python">mysql://root:@localhost/haolesong?charset=utf8</pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flask中Jinja2加载扩展]]></title>
    <link href="http://www.youth2009.org/blog/2012/07/06/load-jinja2-extension-in-flask/"/>
    <updated>2012-07-06T20:34:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2012/07/06/load-jinja2-extension-in-flask</id>
    <content type="html"><![CDATA[<p>在Flask中接触到了jinja2，由于某个简单的需要——在模板系统中计算某些订单项的总价格，必须打开Jinja2的“do”扩展，用一种hack的方法来计算，十分不喜欢这样，但能用。</p>

<p>在Flask的API中没有公开这样的方法，不过在邮件列表的索引里找到了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">app</span><span class="o">.</span><span class="n">jinja_env</span><span class="o">.</span><span class="n">add_extension</span><span class="p">(</span><span class="s">&quot;jinja2.ext.do&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>还想多说一下Jinja2的set方法，超级不爽的一个方法，原本以为set出来的变量就可以和python中的变量一样使用呢，结果在这里的set出来的变量也就是一个助记作用，根本不能保存新的值，也就是说这里的变量相当于我们通常意义上的常量！！！</p>

<p>`
&#8230;&#8230;
{% set total_price = 0 %}
{% for item in order.items %}
{% total_price = item.meal.price * item.quantity %}</p>

<p class = "order_list_item">{{ item.meal.name }}</p>


<p>{% endfor %}
</td>
<td>{{ total_price }}</td>
&#8230;&#8230;
`</p>

<p>原本希望在for外面设置一个变量，然后在for中计算好total_price使用，结果根本不行，这样写的结果就是“找不到total_price变量”，如果去掉for中对total_price的引用就可以正常看到total_price，是0。总之，这里set出来的变量就是一个常量了！！！后来打开了do扩展，把total_price设置成一个list，然后在for中把没一项的价格都append进去，最终输出的地方用了jinja2的filter计算总和。大约会写成这样：</p>

<p>`
&#8230;&#8230;
{% set prices = [] %}
{% for item in order.items %}
{% do prices.append(item.meal.price * item.quantity) %}</p>

<p class = "order_list_item">{{ item.meal.name }}</p>


<p>{% endfor %}
</td>
<td>{{ prices|sum }}</td>
&#8230;&#8230;
`</p>

<p>相信jinja2改进set之后会是一个很不错的模板系统：）</p>
]]></content>
  </entry>
  
</feed>
