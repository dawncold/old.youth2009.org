<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[dawncold's tech blog]]></title>
  <link href="http://www.youth2009.org/atom.xml" rel="self"/>
  <link href="http://www.youth2009.org/"/>
  <updated>2013-04-02T23:06:02+08:00</updated>
  <id>http://www.youth2009.org/</id>
  <author>
    <name><![CDATA[dawncold]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[hhkb]]></title>
    <link href="http://www.youth2009.org/blog/2013/04/02/hhkb/"/>
    <updated>2013-04-02T23:01:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/04/02/hhkb</id>
    <content type="html"><![CDATA[<p>终于，它来了。</p>

<p><img src="http://pic.yupoo.com/dawncold0/CL0AxKWr/medish.jpg" alt="HHKB" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[be-blocked-by-GFW]]></title>
    <link href="http://www.youth2009.org/blog/2013/03/20/be-blocked-by-gfw/"/>
    <updated>2013-03-20T21:04:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/03/20/be-blocked-by-gfw</id>
    <content type="html"><![CDATA[<p>不知什么原因，我的VPS进入了全国路由监视节点。。。现实只要是谁打算ssh过去，就会被封锁一段时间。根据某人告知，这是进入短名单后的action，可以探测我换端口什么的操作，相信离IP被封已经不远了！</p>

<p>VPS啊，先提前和你说R.I.P.吧</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[end-sorted]]></title>
    <link href="http://www.youth2009.org/blog/2013/03/18/end-sorted/"/>
    <updated>2013-03-18T22:10:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/03/18/end-sorted</id>
    <content type="html"><![CDATA[<p>暂时终止sorted的开发，经历了两天痛苦的、没白没黑的、浑浑噩噩的探索后，还是没能搞定iPhone上一个icon的移动过程。实在不行我都打算直接去修改iconstate.plist文件了。。。但就是修改了不能马上响应，需要respring这点受不了！</p>

<p>网上这方面的资料依然少的可怜，很多时间竟然是花在寻找headers文件了，最后才知道根本不需要。你只要有headers拿来看看就ok了，需要什么类的声明自己用@interface写在xm文件中就可以了。tweak的远离是做出dylib后加载，替代系统的api，headers文件对于你来说就是看，然后找需要哪些私有api即可。</p>

<p>过两天兴致来了或许又再搞一下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[big-break-in-tweak-app-build]]></title>
    <link href="http://www.youth2009.org/blog/2013/03/17/big-break-in-tweak-app-build/"/>
    <updated>2013-03-17T09:15:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/03/17/big-break-in-tweak-app-build</id>
    <content type="html"><![CDATA[<p>昨晚弄到1点多也没搞定iOSOpenDev，总是编译出问题，在irc上问了一下也没人回答我，看来还是有很多人在泡irc的！</p>

<p>睡前又看了一下各种文章，等起床打算还是回归theos搞搞试试。</p>

<p>没想到早晨用theos搞了一下竟然ok了！或许是用对了theos的版本？不清楚了。</p>

<p>theos我删掉了原来的，用github上的版本</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git://github.com/DHowett/theos.git <span class="nv">$THEOS</span>
</span></code></pre></td></tr></table></div></figure>


<p>ldid我自己编译的，因为dropbox上的总是很难下载</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git://git.saurik.com/ldid.git
</span><span class='line'><span class="nb">cd </span>ldid
</span><span class='line'>git submodule update --init
</span><span class='line'>./make.sh
</span><span class='line'>cp -f ./ldid <span class="nv">$THEOS</span>/bin/ldid
</span></code></pre></td></tr></table></div></figure>


<p>有篇教程说在iOS上也安装perl和theos，我实在不清楚有什么用，不过我也安装了，蛋疼，具体方法看
<a href="http://iphonedevwiki.net/index.php/Theos/Getting_Started" target="_blank">这里</a></p>

<p>headers用这里的：<a href="https://github.com/rpetrich/iphoneheaders" target="_blank">https://github.com/rpetrich/iphoneheaders</a>
需要注意一点的是IOSurface这个framework，你需要增加一个新的头文件，在Mac系统中，可能还得注释掉两行，这取决于你是不是10.7版本的Mac系统。命令是：<code>cp /System/Library/Frameworks/IOSurface.framework/Headers/IOSurfaceAPI.h .</code>，在251和255行（我编译错误时候提示的就这两行），注释掉</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="cm">/* This call lets you get an xpc_object_t that holds a reference to the IOSurface.</span>
</span><span class='line'><span class="cm">   Note: Any live XPC objects created from an IOSurfaceRef implicity increase the IOSurface&#39;s global use</span>
</span><span class='line'><span class="cm">   count by one until the object is destroyed. */</span>
</span><span class='line'><span class="c1">//xpc_object_t IOSurfaceCreateXPCObject(IOSurfaceRef aSurface)</span>
</span><span class='line'>  <span class="c1">//IOSFC_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_NA);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/* This call lets you take an xpc_object_t created via IOSurfaceCreatePort() and recreate an IOSurfaceRef from it. */</span>
</span><span class='line'><span class="c1">//IOSurfaceRef IOSurfaceLookupFromXPCObject(xpc_object_t xobj)</span>
</span><span class='line'>  <span class="c1">//IOSFC_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_NA);</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后做你的tweak就可以了，我按照经典的heloworld例子搞了个hook，springboard中applicationDidFinishLaunching弹出alert，成功了。</p>

<p>OS:10.8.3，SDKVERSION：6.1</p>

<p>另外昨天说的设置theos的环境变量，我今天又重新加到了bash_profile中，发现make package install都能自动部署了。。。看来真是昨天theos版本的问题？！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[open-development-env-for-xcode]]></title>
    <link href="http://www.youth2009.org/blog/2013/03/16/open-development-env-for-xcode/"/>
    <updated>2013-03-16T20:40:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/03/16/open-development-env-for-xcode</id>
    <content type="html"><![CDATA[<p>发现一个问题，使用theos这个makefile工具做app有很大困难，就是headers不好管理，真希望能集成到xcode中开发tweak，结果发现了一个神器&#8212;-iOSOpenDev。</p>

<p>安装好之后就能发现xcode中已经有很多可用的template了，对于tweak来说，有logos和CaptaionHook。logos就是theos，captainhook是另一个hook框架。</p>

<p>不过很可惜，可能是sdk6.1的问题，结合上springboard和uialertview后就从来没build success，总说armv7中的springboard link error或者uialertview linker error，是在不知道怎么办了，仔细又看了别人的做法，发现他们还在用sdk5.1，估计就是这点差异吧？</p>

<p>彻夜下载sdk5.1.。。。。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[build-up-env-for-sorted]]></title>
    <link href="http://www.youth2009.org/blog/2013/03/16/build-up-env-for-sorted/"/>
    <updated>2013-03-16T17:40:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/03/16/build-up-env-for-sorted</id>
    <content type="html"><![CDATA[<p>找到了一篇教程，开始构建jailbreaken app的环境。</p>

<p>基本需要的工具</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">THEOS</span><span class="o">=</span>/opt/theos
</span><span class='line'>svn co http://svn.howett.net/svn/theos/trunk <span class="nv">$THEOS</span>
</span><span class='line'>curl -s https://dl.dropboxusercontent.com/u/3157793/ldid &gt; <span class="nv">$THEOS</span>/bin/ldid; chmod +x <span class="nv">$THEOS</span>/bin/ldid
</span><span class='line'>brew install dpkg<span class="o">(</span>如果出错安不上dpkg，那就先update一下brew，我就遇到这么个问题<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>用theos模板创建项目，<code>$THEOS/bin/nic.pl</code>，这会在当前目录中创建你的项目，选择模板类型，然后起名字之类的，填好就ok。</p>

<p>在创见出来的项目中有Makefile，里面有一个地方需要注意，就是<code>xxxx_FILES=</code>这里，后面的m和mm文件是你当前所有的，如果你自己加了新的，你需要手动添加进去。</p>

<p>再加两个环境变量</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">SDKVERSION</span><span class="o">=</span>6.1
</span><span class='line'><span class="nb">export </span><span class="nv">THEOS_DEVICE_IP</span><span class="o">=</span>10.0.0.101
</span></code></pre></td></tr></table></div></figure>


<p>目标sdk版本，我用6.1了，后一个是手机的ip，自己弄到一个wifi中吧，后面部署需要。</p>

<p>make&amp;make package，在make的时候不加sudo我会无法make成功。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo make
</span><span class='line'>sudo make package
</span></code></pre></td></tr></table></div></figure>


<p>本目录下的deb就可以放到设备上安装了，安装命令是<code>dpkg -i xxx.deb</code></p>

<p>不过你可以用部署的方式，<code>make package install</code>，他会依赖你刚刚设置的IP部署，但我这里似乎有问题，估计是环境变量的问题，光提示我找不到THEOS_DEVICE_IP</p>

<p>我就scp到了设备上，手动执行了dpkg的命令，然后respring竟然没效果，只好reboot了一下，看到了刚刚的app已经被安装上了！！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[about-Sorted]]></title>
    <link href="http://www.youth2009.org/blog/2013/03/16/about-sorted/"/>
    <updated>2013-03-16T12:54:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/03/16/about-sorted</id>
    <content type="html"><![CDATA[<p>早就考虑做这么一个app，不过拖延到现在了，再次佩服一下我的拖延症。</p>

<p>Sorted是这样一个app，安装上之后就会跟踪你使用手机上app的习惯，根据使用频率给桌面的app排序，估计等你用一段时间之后，第一页的apps就是最常用的了。</p>

<p>当然，这需要你的iPhone jailbreaken。</p>

<p>刚刚用iFile找到了存放app list的地方，在/User/Library/SpringBoard/IconState.plist，plist就像是python中的dict，里面两个key分别是：buttonBar、iconLists。</p>

<p>buttonBar中有个list，是底部Dock上的app标识，例如有：com.apple.mobilephone、com.apple.MobileSMS等。</p>

<p>iconLists中又是一个list，内容也是list，每个list表示桌面某一页上的apps。</p>

<p>不过有个问题是：如果我手动修改了这里的值，比如我交换某页两个app的位置，回到桌面并不会立刻看到效果，如果要看效果，需要respring&#8230;就是重启SpringBoard，这是我不能接受的。需要再看SpringBoard的私有api有没有提供这方面的支持了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[generator-in-python]]></title>
    <link href="http://www.youth2009.org/blog/2013/03/13/generator-in-python/"/>
    <updated>2013-03-13T21:52:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/03/13/generator-in-python</id>
    <content type="html"><![CDATA[<p>今天在代码中遇到一个next方法（python代码），以前从没用过这个，于是简单了解了一下。</p>

<p>next就是iterator了，可以通过iterator来找东西，找到就停下了，如果给了默认值，没找到的话就用默认值。</p>

<p>generator这个东西是很有意思的，比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">other_firstn</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>  <span class="n">num</span><span class="p">,</span> <span class="n">nums</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="p">[]</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">num</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">:</span>
</span><span class='line'>    <span class="n">nums</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'>    <span class="n">num</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">nums</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以产生一个list，里面是按顺序的数字，有n个，结果类似于range(n)的返回值。</p>

<p>还有一个版本的firstn：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">firstn</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>  <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">num</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">:</span>
</span><span class='line'>    <span class="k">yield</span> <span class="n">num</span>
</span><span class='line'>    <span class="n">num</span> <span class="o">+=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个看起来就很帅了，代码也简洁了很多，yield是十分神奇的表达式，产生了一个num，这里不太好想，不能按照正常的function来思考这个执行顺序了。</p>

<p>总之，如果产生100个数字，你可以一下子弄出100个来，或者你知道规则的话，你就弄出第一个来，然后用的时候按照规则，从第一个一直走下去，也产生了100个。最大的不同就是性能，后者必然速度更快了，前提是数量要足够多！写了一个简单的性能对比，主要是时间上的，内存上的不容易监控。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># /usr/bin/python</span>
</span><span class='line'><span class="c">#! -*- coding: utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">firstn</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>  <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">num</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">:</span>
</span><span class='line'>    <span class="k">yield</span> <span class="n">num</span>
</span><span class='line'>    <span class="n">num</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">other_firstn</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>  <span class="n">num</span><span class="p">,</span> <span class="n">nums</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="p">[]</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">num</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">:</span>
</span><span class='line'>    <span class="n">nums</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'>    <span class="n">num</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">nums</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">timer</span><span class="p">(</span><span class="n">func_wrap</span><span class="p">,</span> <span class="n">func</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwards</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span><span class='line'>  <span class="n">r</span> <span class="o">=</span> <span class="n">func_wrap</span><span class="p">(</span><span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwards</span><span class="p">))</span>
</span><span class='line'>  <span class="n">e</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&#39;return: </span><span class="si">%s</span><span class="s">   use </span><span class="si">%f</span><span class="s"> ms[s: </span><span class="si">%s</span><span class="s">, e: </span><span class="si">%s</span><span class="s">]&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="p">(</span><span class="n">e</span> <span class="o">-</span> <span class="n">s</span><span class="p">),</span> <span class="n">s</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>  <span class="n">timer</span><span class="p">(</span><span class="nb">sum</span><span class="p">,</span> <span class="n">firstn</span><span class="p">,</span> <span class="mi">1000000</span><span class="p">)</span>
</span><span class='line'>  <span class="n">timer</span><span class="p">(</span><span class="nb">sum</span><span class="p">,</span> <span class="n">other_firstn</span><span class="p">,</span> <span class="mi">1000000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>  <span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出结果是：大约会慢1倍</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>dawncold <span class="o">[</span>21:49:11<span class="o">]</span> ~<span class="o">=</span>&gt;<span class="nv">$ </span>python 1.py
</span><span class='line'><span class="k">return</span>: 499999500000   use 0.137414 ms<span class="o">[</span>s: 1363182552.38, e: 1363182552.52<span class="o">]</span>
</span><span class='line'><span class="k">return</span>: 499999500000   use 0.290716 ms<span class="o">[</span>s: 1363182552.52, e: 1363182552.81<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[set different password for amazon account]]></title>
    <link href="http://www.youth2009.org/blog/2013/02/20/set-different-password-for-amazon-account/"/>
    <updated>2013-02-20T00:16:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/02/20/set-different-password-for-amazon-account</id>
    <content type="html"><![CDATA[<p>不知怎么，突然发现在iPad上注册kindle设备后，在国内的amazon上无法看到这个设备，云端购买的书籍也都没了，深夜给amazon发了邮件，没想到十几分钟就回复了！！！</p>

<p>得知，如果在amazon美国用了和国内相同的账号，那注册设备的时候可能会被使用美国的数据，那里当然木有我买的书了。。。看来以后kindle要暂时和国际市场say byebye了。</p>

<p>解决方法就是给国内外这两个账号设置不同的密码，试了一下，解决！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[give up ruby]]></title>
    <link href="http://www.youth2009.org/blog/2013/01/27/give-up-ruby/"/>
    <updated>2013-01-27T18:39:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/01/27/give-up-ruby</id>
    <content type="html"><![CDATA[<p>感觉中间隔了好久，最终还是把study ruby给放弃了，顺便找了个充足的理由——在没学好当下这门语言之前，不要再尝试其他的。</p>

<p>虽然一个coder要保持技术的敏感性与前瞻性，但频繁换编程语言实在不是一件好事，我现在仍然对于自己涉猎太多编程语言而感到烦躁，主要就是会的太多而不精，一旦用上了还真拿不出手，那种感觉很不爽！所以，暂且不要跟着《Pragmatic Programmer》中说得那样来了。</p>

<p>暂且这样吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在MacOS上配置dnsmasq]]></title>
    <link href="http://www.youth2009.org/blog/2013/01/22/config-dnsmasq-on-macos/"/>
    <updated>2013-01-22T22:26:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/01/22/config-dnsmasq-on-macos</id>
    <content type="html"><![CDATA[<p>最近那个伟大的墙把我们敬爱的git大神封锁了，无奈很多代码都托管在上面，其中也不乏很多商业项目。自己的几个blog也都放在上面，倒不是因为在那里免费，而是这已然已经成为程序员们的一种生活style。</p>

<p>ubuntu下有个dnsmasq可以连接别的dns，这样能够避免dns污染导致上不了github的问题。相关配置不算难，下面记录一下在MacOS下的dnsmasq配置方法。</p>

<p>1.使用brew安装dnsmasq</p>

<pre><code>brew install dnsmasq
</code></pre>

<p>2.修改一下dnsmasq的配置文件名字</p>

<pre><code>cp /usr/local/opt/dnsmasq/dnsmasq.conf.example /usr/local/etc/dnsmasq.conf
</code></pre>

<p>3.加入MacOS的启动项中</p>

<pre><code>sudo cp -fv /usr/local/opt/dnsmasq/*.plist /Library/LaunchDaemons
</code></pre>

<p>4.加载并启动dnsmasq，如果没有出现什么错误就开始配置dnsmasq</p>

<pre><code>sudo launchctl load /Library/LaunchDaemons/homebrew.mxcl.dnsmasq.plist
</code></pre>

<p>5.配置dnsmasq，把no-resolve的注释去掉，加入<code>server=xxx.xxx.xxx.xxx#nnnn</code></p>

<pre><code>mate /usr/local/etc/dnsmasq.conf

server的值可以从dns.v2ex.com中找到，“#”后面的是端口号，比如v2ex那个用3389
</code></pre>

<p>6.重启dnsmasq</p>

<pre><code>sudo launchctl stop homebrew.mxcl.dnsmasq
</code></pre>

<p>其实无需再执行<code>sudo launchctl start homebrew.mxcl.dnsmasq</code>这句了，因为你load了plist进去就已经启动了，如果此时stop的话会再自动start，所以没必要再start。要想关闭请使用unload（就修改上面的4即可）</p>

<p>7.把网络的dns设置成127.0.0.1，这样你才能用自己的dns服务</p>

<p>至此，我们的git大神就回归了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[merge partition got Couldn’t modify partition map because file system verification failed error]]></title>
    <link href="http://www.youth2009.org/blog/2013/01/20/merge-partition-got-couldnt-modify-partition-map-because-file-system-verification-failed-error/"/>
    <updated>2013-01-20T19:36:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/01/20/merge-partition-got-couldnt-modify-partition-map-because-file-system-verification-failed-error</id>
    <content type="html"><![CDATA[<p>前几天需要把本机的VMware虚拟机文件拷到工作机器上用，但文件比较大，有30G，U盘不行，无线共享太慢，网线直连无奈工作机器百兆网卡不给力还是慢，分割了我的TimeMachine备份盘，但用完后再合并划分出去的分区就出问题了，提示：</p>

<pre><code>Couldn’t modify partition map because file system verification failed error
</code></pre>

<p>此时可以Verify一下这个硬盘，如果有错误就repair，相信这里没问题的都应该可以再合并了吧，我这里还是出问题了，在提示repair complete之后出现了一个错误，好像是boot什么的错误，建议我reformat，再弄backup file，backup file too many？？记不清楚了，再合并一次分区，不行的话果断erase掉，再backup，反正现在backup都用不上，趁着清理一下也好。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gets method in ruby]]></title>
    <link href="http://www.youth2009.org/blog/2013/01/03/gets-method-in-ruby/"/>
    <updated>2013-01-03T20:40:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/01/03/gets-method-in-ruby</id>
    <content type="html"><![CDATA[<p><strong>Important</strong>: Also notice that we&#8217;re using STDIN.gets instead of plain &#8216;ol gets. That is because if there is stuff in ARGV, the default gets method tries to treat the first one as a file and read from that. To read from the user&#8217;s input (i.e., stdin) in such a situation, you have to use it STDIN.gets explicitly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby学习记录]]></title>
    <link href="http://www.youth2009.org/blog/2013/01/01/some-ruby-study-log/"/>
    <updated>2013-01-01T08:22:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2013/01/01/some-ruby-study-log</id>
    <content type="html"><![CDATA[<p>在wanglei的鼓动下，我开始了探寻Ruby这款被他成为做产品的语言，同时，Ruby对我来说也是上天的安排——我的生日石就是Ruby～虽然如此，其实我早就开始了Ruby的探索，曾经买过《松本行弘的程序世界》、《Ruby变成语言》这两本很好的书，无奈当时怎么看也看不进去，就暂且放弃了，相反，更喜欢了Python。</p>

<p>最近的工作语言一直是Python，感觉很好，不过Ruby对我来说更显得优美一点，主要是喜欢他们的文档，非常全面，但不喜欢TA的快速变更，特别是ROR，当时买的书和网上的版本很难契合，我又不那么喜欢用低版本的ROR，学起来就痛苦一点，最终还是放弃了。</p>

<p>前几天看到Learn Python the Hard Way发布了3.0版，同时网站也更名为Learn Code the Hard Way，十分符合技术人士的胃口，当然用来入门还是可以的，深入的话还是得靠自己阅读更高级的书和工作实践。这个网站现在也有Ruby、C、Regex、SQL等等教程，于是在没有书的情况下，我就从这里学习Ruby了。</p>

<p>现在已经学了基本的puts和gets，能写超小的CLI了，不过还得学点loop什么的才可以，而且各种object的method也得熟悉，否则很痛苦：（</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给开源项目做贡献了]]></title>
    <link href="http://www.youth2009.org/blog/2012/12/19/make-a-contribution-to-open-source-project/"/>
    <updated>2012-12-19T21:18:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2012/12/19/make-a-contribution-to-open-source-project</id>
    <content type="html"><![CDATA[<p>惭愧，第一次给开源项目做贡献竟然是现在，其实早就想帮着做点啥了，无奈技术能力不足，终于发现一个机会，给progit的README文档添加MacOS用户的使用方式，可惜噩梦也是这样开始的。</p>

<p>一开始添加了usage for macos users，commit然后push，作者和我说少一个blank line，我加了再commit和push，另一个开发者和我说你不应该多次commit，需要说清楚commit的工作而不是一味用commit修改，我改好了发现remote的版本和本地不一样，因为我是在上一个版本的基础上amend后再提交的，无奈之下我merge了remote然后commit又push，这时候作者跳出来一对一教我怎么做了，有不少细节地方需要注意，比如完全的command line可以在markdown中用tab的indent，而list的indent和tab是完全不一样的。。。又给我罗列了markdown的语法。我让他写一个正确的给我看一下，他真的就给我写了一遍，但是他给希望让别人来做这部分工作而不是自己来做，并不是自己能力不足什么的，光是在我这里付出的时间就远超编辑好几个版本的README了。这点在国内开发者的身上很难发现吧？！</p>

<p>最后当然是pull request被接受了：）这次经历很难得！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我在考虑迁移到octopress上]]></title>
    <link href="http://www.youth2009.org/blog/2012/11/25/thinking-convert-to-octopress-blog-system/"/>
    <updated>2012-11-25T21:51:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2012/11/25/thinking-convert-to-octopress-blog-system</id>
    <content type="html"><![CDATA[<p>最近的work@honovation博客一直是用octopress写的，就是直接写markdown内容即可，github负责转换并提供托管服务，而且可以自己绑定域名，比如现在的http://workathonovation.youth2009.org就是这么弄得，非常简洁的方式，而且有种回归本真的感觉。</p>

<p>迟迟没有动作是因为我付了30刀个这个VPS，也就是到2月才过期，如果全部转到了octopress那么空着这个VPS干嘛？翻墙玩？呵呵，那真是无聊死了吧。。。说实在的，vps除了放个blog和自己做出来的小站外，好像就没什么用处了，但现在自己连小站都没有了，悉数关闭。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pytz的6分钟时差]]></title>
    <link href="http://www.youth2009.org/blog/2012/10/20/6-minutes-offset-in-pytz/"/>
    <updated>2012-10-20T16:13:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2012/10/20/6-minutes-offset-in-pytz</id>
    <content type="html"><![CDATA[<p>项目中有使用pytz这个第三方库来处理datetiem相关的东西。不过最近测试的时候发现，创建了一个时间点后，最终得到的时间点和预想的时间点有6分钟的误差，从网上搜到的资料是这样解决的：详情看http://hi.baidu.com/limodou/item/72da32384b25c7ff97f88df1</p>

<p>创建datetime的时候，特别是带timezone，需要localize一下，否则在使用pytz的时候就会出现这6分钟的差异。代码中首先创建了datetime，然后localize后再replace了timezone为pytz的，最终还astimezone为pytz.utc。我们是使用utc的，你的代码也许不需要：）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NAT实践]]></title>
    <link href="http://www.youth2009.org/blog/2012/10/09/nat-practical/"/>
    <updated>2012-10-09T14:09:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2012/10/09/nat-practical</id>
    <content type="html"><![CDATA[<p>昨天用LXC建立了不少container，分别用来做webserver、databaseserver等等，让这些container运行着各自程序启动后如果有外部访问，就会通过iptables把请求发送到各自的地方，这里需要宿主机器做NAT。比如访问80端口，我会把请求转发到内部10.0.3.20这台container来处理，相应的response也会返回过去。这样就做到了服务隔离。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo iptables -t nat -A PREROUTING -i eth1 -p tcp --dport 80 -j DNAT --to 10.0.3.20
</span><span class='line'>sudo iptables -t nat -A POSTROUTING -o eth1 -s 10.0.3.20 -j SNAT --to 200.200.200.25
</span></code></pre></td></tr></table></div></figure>


<p>这样就把进入的请求都发到了10.0.3.20这台container上去处理。</p>

<p><img src="http://pic.yupoo.com/dawncold0/CkkIbzDr/medish.jpg" alt="nat" /></p>

<p>只默认开了一个nginx，就这样的效果。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LXC实践]]></title>
    <link href="http://www.youth2009.org/blog/2012/10/08/lxc-practical/"/>
    <updated>2012-10-08T20:46:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2012/10/08/lxc-practical</id>
    <content type="html"><![CDATA[<p>这里的LXC是基于Ubuntu12.04的，在其他系统下可能不太一样。</p>

<p>0.安装lxc</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install lxc
</span></code></pre></td></tr></table></div></figure>


<p>1.修改lxc的mirror，不修改的话下载一个ubuntu景象会非常慢！！！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo emacs /etc/default/lxc
</span><span class='line'>第三行的mirror注释去掉，并修改为cn.archive.ubuntu.com，这样就非常快了
</span></code></pre></td></tr></table></div></figure>


<p>2.创建lxc容器，t表示模板中的名字，n表示这个容器的名字（可自定义）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo lxc-create -t ubuntu -n ubuntu_container
</span></code></pre></td></tr></table></div></figure>


<p>3.启动容器</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo lxc-start -n ubuntu_container
</span></code></pre></td></tr></table></div></figure>


<p>启动后就会出现登录ubuntu的界面，刚刚创建好容器后会给出一个提示，帐号密码都是ubuntu，登录进去就可以使用了。</p>

<p>猜想lxc的用法可能是对于部署的某个进程使用lxc隔离，这并不能做vps用，lxc只是轻量虚拟化，针对进程来的，所以还是单机在使用，如果做vps就得用vmware、xen、openvz这样的东西了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LVM+RAID实践]]></title>
    <link href="http://www.youth2009.org/blog/2012/10/08/lvm-and-raid1/"/>
    <updated>2012-10-08T14:09:00+08:00</updated>
    <id>http://www.youth2009.org/blog/2012/10/08/lvm-and-raid1</id>
    <content type="html"><![CDATA[<p>两块256Gb SSD，做RAID1，用LVM管理，方便日后动态扩容等。</p>

<p>0.分区，因为是SSD，需要注意4K对齐问题，否则对SSD的寿命和性能有影响：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>fdisk /dev/sda
</span><span class='line'>fdisk /dev/sdb
</span></code></pre></td></tr></table></div></figure>


<p>1.创建PV</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo pvcreate /dev/sd<span class="o">{</span>a1,b1<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>2.创建VG</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo vgcreate -s 16M vg0 /dev/sd<span class="o">{</span>a1,b1<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>3.创建LV</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo lvcreate -n lv0 vg0 -m 1 -lxxxx --corelog
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
