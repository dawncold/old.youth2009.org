<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Trade Off]]></title>
  <link href="http://www.youth2009.org/www/atom.xml" rel="self"/>
  <link href="http://www.youth2009.org/www/"/>
  <updated>2014-05-30T20:27:02+08:00</updated>
  <id>http://www.youth2009.org/www/</id>
  <author>
    <name><![CDATA[dawncold]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[dive-into-tornado]]></title>
    <link href="http://www.youth2009.org/www/blog/2014/03/27/dive-into-tornado/"/>
    <updated>2014-03-27T21:22:58+08:00</updated>
    <id>http://www.youth2009.org/www/blog/2014/03/27/dive-into-tornado</id>
    <content type="html"><![CDATA[<p>早就有这样的计划，要深入了解自己在用的工具，veil算一个，tornado算一个，flask算一个……当然还有好多，总得一个个看一番，好在这些库都写得足够简单，不至于一下子看不懂，而且借助pycharm这样优秀的工具，一步步跟踪代码也给深入理解框架极大的帮助，所以，开始吧。（也好久都没更新过技术博客的内容了）</p>

<p>终于可以再让Mac发挥发挥余热了，pycharm用的社区版，估计对于学习够用了。tornado升级到了稳定的3.2版，也是目前的最新版，先慢慢研读官方的文档，再慢慢看完api。</p>

<p>keymap是个问题，平时用键盘的时候，用的是default键位，现在改用MacOS10.5+的键位，还算是熟悉，但最基本的几个（查找文件、查找符号、搜索、重构等重新熟悉了，再高级的用法估计社区版不支持）</p>

<p>在写hello，world例子的时候，处理GET我直接就下意识返回了想要的字符串，没想到运行起来是500 error，仔细一看原来官方的例子中处理GET是要调用<code>self.write('xxx')</code>，然后我就看了下self.write做了什么，self是我定义的class，但这个class继承自tornado.web.RequestHandler, 于是看tornado.web.RequestHandler的write做什么，write的参数叫chunk，并不是简单的叫str之类的东西，也就是说不限于str，有可能是些别的东西，比如注释中说如果你write了一个dict，tornado会转换成JSON，并且把Content-Type给你设置好，现在的veil也支持了这个优秀特性。还提到了list不会被转换成JSON格式，因为一个漏洞（坑），具体看<a href="http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx/">这里</a>，简单讲，就是用script的src指向一个网站需要登陆后才能访问的地址，因为你如果登陆过的话，cookie信息会随之发送到这个地址，此时如果你去了一个邪恶的网站，他里面有些脚本，引用刚刚提到的你需要登陆的网址，你浏览器会把你的一些信息带上，请求这个地址，这个地址会返回一些你的个人资料，比如是用JSON的array回给你，但邪恶网站把javascript array的constructor改写了，你拿到JSON的array会被自动转成js array，这样邪恶网站会收集到你的信息，然后再发送回自己一个接受数据的接口就可以了。避免方法就是：返回JSON的时候用对象方式；这种关键信息用POST提交，script标签只会发送GET请求；现代高级浏览器都不会有问题，大可放心。转换成了byte string（就是str）放入chunk_buffer，一起写到output。</p>

<p>我们的handler很简单，实现了get方法，然后write了一个字符串，但后来呢？或许应该从另一条路看起——从url被映射到handler看起。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[return-value-in-jquery-json-datatype]]></title>
    <link href="http://www.youth2009.org/www/blog/2014/01/23/return-value-in-jquery-json-datatype/"/>
    <updated>2014-01-23T18:57:21+08:00</updated>
    <id>http://www.youth2009.org/www/blog/2014/01/23/return-value-in-jquery-json-datatype</id>
    <content type="html"><![CDATA[<p>向api server发送请求做一件事的时候，比如修改密码，server做完后没有返回值，response code是200。这在原来的时候没问题，“原来”是指ajax的dataType未指定的时候，jQuery会自己猜测用什么，但这次指定了server的response是json，所以，即便是看到200 code也未能调用OnSuccess，空返回值对于json是不合法的，于是返回一个什么东西就好，当然要先to_json再返回。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nginx-and-dependences]]></title>
    <link href="http://www.youth2009.org/www/blog/2014/01/16/nginx-and-dependences/"/>
    <updated>2014-01-16T18:46:33+08:00</updated>
    <id>http://www.youth2009.org/www/blog/2014/01/16/nginx-and-dependences</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.34.tar.gz
</span><span class='line'>wget http://www.openssl.org/source/openssl-1.0.1f.tar.gz
</span><span class='line'>wget http://nginx.org/download/nginx-1.5.8.tar.gz
</span></code></pre></td></tr></table></div></figure>


<p>default install pcre and openssl</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>nginx configure
</span><span class='line'>+gzip
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Configuration summary
</span><span class='line'>  + using system PCRE library
</span><span class='line'>  + OpenSSL library is not used
</span><span class='line'>  + md5: using system crypto library
</span><span class='line'>  + sha1: using system crypto library
</span><span class='line'>  + using system zlib library
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lxml-and-dependences]]></title>
    <link href="http://www.youth2009.org/www/blog/2014/01/16/lxml-and-dependences/"/>
    <updated>2014-01-16T18:31:09+08:00</updated>
    <id>http://www.youth2009.org/www/blog/2014/01/16/lxml-and-dependences</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install libxml2-dev
</span><span class='line'>sudo apt-get install libxslt1-dev
</span><span class='line'>sudo apt-get install python-dev  （if Python.h: No file or dir..）
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[daemon-in-nginx]]></title>
    <link href="http://www.youth2009.org/www/blog/2014/01/06/daemon-in-nginx/"/>
    <updated>2014-01-06T21:57:39+08:00</updated>
    <id>http://www.youth2009.org/www/blog/2014/01/06/daemon-in-nginx</id>
    <content type="html"><![CDATA[<p>最近要把bnly重新运行起来，前两天整理了cli版本的程序，放到<a href="GitHub">https://github.com/dawncold/bnly-cli</a>，另一个web版的放到了bitbucket上的私有仓库，准备做部署的时候用，没想到bitbucket最近没有被kill，难道放开了？</p>

<p>用supervisor做进程管理的时候被nginx坑了，由于nginx的配置很强大，现在还处在搭建环境的初期，很多配置写不完整，导致了nginx总是在频繁启动，log中看到的是80端口已经被占用。。。找了半天只有nginx占着80，而且又不会开多个nginx（supervisor的配置中没有明确说开多个程序，默认一个），搜了挺长时间都没有结果。</p>

<p>突然想到了daemon。</p>

<p>nginx的文档建议生产环境应该off，但这个和我遇到的问题无关。默认daemon开了，supervisor运行后会认为nginx退出了，再启动一个，其实上一个已经启动成功，所以就总看到80端口被占用，于是在nginx的配置上加<code>deamon off</code>即可。</p>

<p>是不是很坑？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Object.keys-and-JSON-in-IE6]]></title>
    <link href="http://www.youth2009.org/www/blog/2013/12/08/object-dot-keys-and-json-in-ie6/"/>
    <updated>2013-12-08T14:52:12+08:00</updated>
    <id>http://www.youth2009.org/www/blog/2013/12/08/object-dot-keys-and-json-in-ie6</id>
    <content type="html"><![CDATA[<p>下单页面用到了js中的JSON和Object.keys，都是坑。</p>

<p>JSON虽然是build-in的JSON parser和stringify方法，但IE6，7，8(Q)都是无法使用的，如果用jQuery的话，可以用jQuery的parseJSON来解析，但stringify的话需要依赖第三方库或者自己实现，我用了JSON3.js这个库。首选build-in的parse和stringify方法，如果没有就实现。github地址：<a href="https://github.com/bestiejs/json3">https://github.com/bestiejs/json3</a></p>

<p>同样的Object.keys()因为不能在IE9下使用，因为要取一个Object的keys数量，有的时候是用Object的keys列表，所以以后为了兼容，就只能：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">p</span> <span class="k">in</span> <span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">p</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">count</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">keys</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">p</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[useful-shell-command]]></title>
    <link href="http://www.youth2009.org/www/blog/2013/12/07/useful-shell-command/"/>
    <updated>2013-12-07T22:28:53+08:00</updated>
    <id>http://www.youth2009.org/www/blog/2013/12/07/useful-shell-command</id>
    <content type="html"><![CDATA[<p>找到size为0的文件，并删除：<code>find -type f -size 0 | xargs rm</code></p>

<p>替换Linux的换行成windows的：<code>ls | xargs perl -i -pe 's/\n/\r\n/g'</code></p>

<p>批量改名哦（把<em>.md改为</em>.markdown）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">for </span>i in <span class="sb">`</span>ls *.md<span class="sb">`</span>;<span class="k">do </span>mv <span class="nv">$i</span> <span class="sb">`</span><span class="nb">echo</span> <span class="nv">$i</span> | sed <span class="s1">&#39;s/.md/.markdown/&#39;</span><span class="sb">`</span>;<span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[upgrade-to-linode-for-not-waiting]]></title>
    <link href="http://www.youth2009.org/www/blog/2013/12/03/upgrade-to-linode-for-not-waiting/"/>
    <updated>2013-12-03T22:32:58+08:00</updated>
    <id>http://www.youth2009.org/www/blog/2013/12/03/upgrade-to-linode-for-not-waiting</id>
    <content type="html"><![CDATA[<p>上个月买了linode的vps，不知道干什么用，光翻墙了，月底干脆就关了，觉得这样翻墙的成本太高了，完全可以租个便宜的vps来用，后来觉得还是linode好。</p>

<p>在用linode之前用过digitalocean，那时候DO刚刚起步，速度不错，主要是华人不多，而且价格一如既往的便宜，公司决定买这个翻墙用，但后来速度一天天慢下来了，看到最近DO的推广力度增大，可能这就是为啥速度不理想的原因。</p>

<p>prgmr.com是个不错的vps，技术感超强，但很可惜在公司速度很好，160ms的ping延迟，不过回到家发现延迟到了400+，真不明白网络就能差这么多。好处是能不交费先用一段时间体验，support很好。</p>

<p>ramhost.us据说也不错，不会超售，在家wget一个文件速度上了400+，可惜就那么一次，也不知道是不是那一次把所有RP全用光了，后来怎么都是个位数的速度。同样技术感很强，缺点就是support靠人，站长貌似也不总是盯着这个，没拿到trial来试试。</p>

<p>其实vpsee这个也能考虑试试，linuxtoy.org放在上面，感觉访问速度挺好，价格10刀，不算是便宜，但和linode比便宜一半了。以前用过几个月的vps，很稳定，被GFW过IP，站长免费给换，总之一切都好。</p>

<p>最后是linode，又回来了，很早很早的时候，大约是初中那会，对建站很感兴趣，那时候还没有流行vps，都是shared hosting，当时买过hostmonster的一年服务，没做啥东西，算是浪费了吧。后来过了挺长时间逐渐接触到vps，用过yardvps，amazon的也试过，那时候没法买linode，因为信用卡，就想着哪天能有信用卡了就可以自由买这个了，现在确实能买了，也不知道买了干嘛了，以为能做个app，但终究没想出来做什么。好在能解决访问Google等网站时候的延迟，有时候大脑在想一件事，google一下结果，此时慢了，可能又跳跃到别的事情上了。或许人和人不太一样。</p>

<p>Linode Referral URL：<a href="https://www.linode.com/?r=84379f19216416e48085518afcde3beb02aee9c8">https://www.linode.com/?r=84379f19216416e48085518afcde3beb02aee9c8</a></p>

<p>Linode Referral Code：84379f19216416e48085518afcde3beb02aee9c8</p>

<p>如果用这个code注册linode，在你用满3个月的时候我们彼此能够得到20刀的奖励：）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rarp]]></title>
    <link href="http://www.youth2009.org/www/blog/2013/08/25/rarp/"/>
    <updated>2013-08-25T12:01:00+08:00</updated>
    <id>http://www.youth2009.org/www/blog/2013/08/25/rarp</id>
    <content type="html"><![CDATA[<h2>Packet Format</h2>

<p>RARP packet is identical to ARP packet, differences: RARP &lsquo;type&rsquo; field is 0x8035 for request and reply and &lsquo;op&rsquo; field is 3 for RARP request and 4 for RARP reply.</p>

<p>RARP&rsquo;s reply is unicast.</p>

<p>The implementation of RARP server is complex&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[timestamp]]></title>
    <link href="http://www.youth2009.org/www/blog/2013/08/20/timestamp/"/>
    <updated>2013-08-20T21:56:00+08:00</updated>
    <id>http://www.youth2009.org/www/blog/2013/08/20/timestamp</id>
    <content type="html"><![CDATA[<p>今天在做批量导入图片功能的时候，发现一个问题，原先save image过程用timestamp当文件名，这样在一般使用的时候倒是没什么问题了，但让程序去做的时候，timestamp就显得不好用了，程序跑的很快，可能三四张图都在1s内处理完上传，这样就很难保证文件名不重复。</p>

<p>传一张停1秒呢？问题不大，但看着还是不保险，而且变慢了，因为要等。。。</p>

<p>纯粹uuid倒是问题不大，但日后管理起来确实就不爽了——看uuid根本不知道谁先谁后，所以就把tiemstamp和uuid4连起来当新文件名，这样程序批量传也不会有问题（其实概率已经低到这个时代可接受的程度吧），又在trade off了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[conceptual-models]]></title>
    <link href="http://www.youth2009.org/www/blog/2013/08/19/conceptual-models/"/>
    <updated>2013-08-19T22:12:00+08:00</updated>
    <id>http://www.youth2009.org/www/blog/2013/08/19/conceptual-models</id>
    <content type="html"><![CDATA[<h2>Conceptual Models</h2>

<p>Designing software so that its structure reflects that of the problem.</p>

<p>Analysis is not only listing requirments, but also looking behind the surface requirments to come up with a mental model of what is going in the problem.</p>

<p>Conceptual model is a human artifact.</p>

<p>Developers use conceptual models to represent a model of the real world in order to understanding the read part of problems easily.</p>

<p>There is no right or wrong model, merely one that is more useful for the job at hand.</p>

<p>The example, snooker simulation, if your choose a Einsteinian model would be flexible enought to low speed or high speed situation, but the complexity is totally different you know, so the flexibility and many others aspects need a trade-off.</p>

<p>When building a model in a programming language, maybe Python, you may get lost in this language or building this model using some features belong to Python, so this model is a Python-model, and it is hard to be implemented in other languages such as Java, PHP, etc. To avoid these problems, you need a third-party analysis techniques.</p>

<p>Only domain experts could build right model, because of their domain knowledge.</p>

<p>Conceptual model is closely to software interfaces rather than software implementations. One of the important things about OO is that it separates interface from implementation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[arp]]></title>
    <link href="http://www.youth2009.org/www/blog/2013/08/18/arp/"/>
    <updated>2013-08-18T20:38:00+08:00</updated>
    <id>http://www.youth2009.org/www/blog/2013/08/18/arp</id>
    <content type="html"><![CDATA[<pre><code>32 bits Internet address
|                   /|
|ARP                 |RARP
|/                   |
48 bits Ethernet address
</code></pre>

<h1>Gratuitous ARP</h1>

<ol>
<li>send its own IP to verify whether someone has used this.</li>
<li>update old MAC address in ARP cache</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[manage-rasp-pi-in-internal-network]]></title>
    <link href="http://www.youth2009.org/www/blog/2013/08/08/manage-rasp-pi-in-internal-network/"/>
    <updated>2013-08-08T22:16:00+08:00</updated>
    <id>http://www.youth2009.org/www/blog/2013/08/08/manage-rasp-pi-in-internal-network</id>
    <content type="html"><![CDATA[<p>今天早晨去公司后一开邮箱发现好多树莓派发来的警告信，如果是一封信可能是误报，但这么多，难道是真的有人闯入？不过看了大部分的图片都是空空的房间，但仍然有新的邮件过来，看来是红外探测器出问题了。</p>

<p>想了半天以为是昨天加的DHT11在读取数据的时候是不是改变了GPIO的布局，导致探测器的数据口得到数据，激活了它？后来证明不是。猜测啊：探测器放到了无线网卡下方，无线网卡有个工作指示灯一直闪烁，会不会触发了探测器，因为我换了个地方后探测器就正常工作了。</p>

<p>在没有远程管理的前提下，解决的方法是去七牛把bucket先删掉，这样就不能再上传图片了，然后去sendgrid修改密码，这样就不能发送邮件了。其实我期待能引发一个异常，这样程序就退出了，但很可惜，七牛的lib似乎做了些处理，删掉bucket或者修改API KEY这样的方法也就是给个提示出来，他们处理了异常，不过好在sendgrid的lib没有处理异常，密码错误后引发的异常终止了程序！GREAT！我还担心了一天摄像头不断拍照会不会坏掉。</p>

<p>上面都是背景吧，主题是一个远程管理的重要性，特别是出现这种突发情况而你又不在边上。</p>

<p>受限于当地的网络环境，树莓派在一个很深的网络中——有家庭的路由器，再往上是小区的路由器，也许再往上就是公网IP了，和在原来的家不同，直接能拿到公网IP，这样基本可以让树莓派暴露在公网上，管理起来当然方便了。穿透这么多层网络，感觉好麻烦，虽然毕业论文是NAT穿透的应用。。。</p>

<p>简单的做法就是利用第三方，我有一个VPS，当然在海外，除了速度上不如国内快之外，别的没啥了。</p>

<p>于是在树莓派上建立一个反向SSH：<code>ssh -p VPS_PORT -fNR 2222:127.0.0.1:22 USER@VPS_HOST</code>，其中VPS_PORT如果你没修改默认的22的话，可以不写<code>-p VPS_PORT</code>，其他的，比如<code>fN</code>，你可以先不写，测试成功后再写上，只做端口转发而不执行命令。后面的R表示反向连接：就是127.0.0.1的22端口在后面远程主机中映射到2222端口。这样，登陆了远程主机的人，访问2222端口就可以访问到树莓派的22端口了。</p>

<p>再临时生成几个rsa key加到authorized_keys中就可以不输密码登陆了，虽然速度稍慢一点，但至少是可用的！</p>

<p>测试通过后使用autossh建立连接，这样即便是中断也会重连上：）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[basestring-and-str-in-python2x]]></title>
    <link href="http://www.youth2009.org/www/blog/2013/08/08/basestring-and-str-in-python2x/"/>
    <updated>2013-08-08T21:39:00+08:00</updated>
    <id>http://www.youth2009.org/www/blog/2013/08/08/basestring-and-str-in-python2x</id>
    <content type="html"><![CDATA[<p>今天在代码中发现原本过滤str的一个func被写成了过滤basestring，于是查了下basestring和str的区别：(在3.0之前)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>    object
</span><span class='line'>         |
</span><span class='line'>         |
</span><span class='line'>     basestring
</span><span class='line'>        / \
</span><span class='line'>       /   \
</span><span class='line'>     str  unicode</span></code></pre></td></tr></table></div></figure>


<p>3.0之前python中有plain string和unicode string，前者是ascii中的那些字符，后者就是所有字符了，因为historical legacy。。。python出现的时候还木有unicode，所以很多python的lib是需要慢慢转换的，当然到了3.0就会不复存在了，全是unicode。</p>

<p>这样的话就清楚了，str代表了那些ascii字符，unicode就是全部的字符，他们都继承自basestring。basestring是从python2.3开始引入的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[opencv-with-pi]]></title>
    <link href="http://www.youth2009.org/www/blog/2013/08/03/opencv-with-pi/"/>
    <updated>2013-08-03T17:44:00+08:00</updated>
    <id>http://www.youth2009.org/www/blog/2013/08/03/opencv-with-pi</id>
    <content type="html"><![CDATA[<p>想了好久都觉得连续拍照片做监控实在是没什么效率，默认情况应该是什么都不做，如果发现有人来了才拍下来或者录下来，但用标配的摄像头录像实在是会录出非常大的文件，保存文件又是问题。在<a href="http://www.raspberrypi.org/archives/4207">官网的博客</a>中看到了一个用opencv做的人脸识别，可以这样干嘛。于是紧随那片文章开始干。</p>

<p>由于标配摄像头模块不是usb设备，所以需要重新编译使用的几个程序，比如raspistill和raspivid等等。</p>

<p>另外，如果直接在raspberrypi上编译，需要安装一些软件：<a href="http://thinkrpi.wordpress.com/2013/04/05/step-3-install-softwares-for-webcam-and-computer-vision/">http://thinkrpi.wordpress.com/2013/04/05/step-3-install-softwares-for-webcam-and-computer-vision/</a></p>

<p>具体的操作请参照：<a href="http://thinkrpi.wordpress.com/2013/05/22/opencv-and-camera-board-csi/">http://thinkrpi.wordpress.com/2013/05/22/opencv-and-camera-board-csi/</a></p>

<p>替换arm-linux.cmake的命令:<code>sed -i 's/if (DEFINED CMAKE_TOOLCHAIN_FILE)/if (NOT DEFINED CMAKE_TOOLCHAIN_FILE)/g' arm-linux.cmake</code>，看准了arm-linux.cmake的路径，我运行命令的时候已经到了和arm-linux.cmake一个目录下了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[got-raspberry]]></title>
    <link href="http://www.youth2009.org/www/blog/2013/08/02/got-raspberry/"/>
    <updated>2013-08-02T21:40:00+08:00</updated>
    <id>http://www.youth2009.org/www/blog/2013/08/02/got-raspberry</id>
    <content type="html"><![CDATA[<p>工资一发就买了块表。。。并且还狠心买了这个玩具——raspberry。</p>

<p>默认用了新手的那个镜像，叫NOOBS，就是里面装好了不少东西，系统也有好几个，默认用了推荐的Raspbian，是Debian的一个变种啦，开发用的Ubuntu都是一个家族的。</p>

<p>配置的话，没啥可说的，就是把显卡占用的内存改成了16Mb，默认似乎分配了128M过去，对于我这种总看命令行的人足够了。如果你和我一样买了官方的摄像头模块，那就可以把camera给enable了。再就是在adcanced options中把SSH打开，否则你还得连上键盘鼠标去操作。。。</p>

<p>不喜欢插网线，但很可惜办公室的Cisco双频无线网卡AE2500装不上，貌似是驱动问题，不想折腾，还好买了个免驱的小网卡叫EOUP。我的无线路由是hidden SSID了，所以在连接的时候还有点问题。在配置文件<code>/etc/wpa_supp/wpa_supp.conf</code>中多加了一行：
<code>scan_ssid=1</code></p>

<p>apt的source也改到了ustc.edu.cn的：<code>http://mirrors.ustc.edu.cn/raspbian/raspbian/</code>，具体就是把<code>/etc/apt/source.list</code>中第一行的URL改成上面那个即可。</p>

<p>camera的官方使用教程：<a href="http://www.raspberrypi.org/archives/3890">http://www.raspberrypi.org/archives/3890</a></p>

<p>如果想用camera捕捉视频，然后传到你这里看的话，需要在raspberry上先装netcat，我是用的Mac系统，系统本身有nc了，再用brew多装一个mplayer。</p>

<p>raspberrrypi上捕捉视频用：<code>raspivid -t 1000000 -vs -w 800 -h 600 -o -| nc 172.19.1.124 5001</code>，其中t参数指定了捕捉多少毫秒的视频，后面的vs是防抖，w和h控制宽高，这样就得到一个800x600的画面。</p>

<p>Mac上用nc把发来的stream转到mplayer上：<code>nc -lp 5001 | mplayer -fps 31 -cache 512 -</code>，很无语的是<code>man nc</code>得到一句解释，l和p参数在一起用是个错误，但不加p就绝对在我这里不work！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[internet protocol]]></title>
    <link href="http://www.youth2009.org/www/blog/2013/07/27/internet-protocol/"/>
    <updated>2013-07-27T23:02:00+08:00</updated>
    <id>http://www.youth2009.org/www/blog/2013/07/27/internet-protocol</id>
    <content type="html"><![CDATA[<p>TCP, UDP, ICMP, IGMP need IP datagrams as data transmitting method.</p>

<p>IP is a unrealiable and connectionless delivery service.</p>

<ul>
<li>unrealiable: no guarantee that an IP datagram successfully get to its destination.</li>
<li>connectionless: IP doesn&rsquo;t maintain any state of successive datagrams, it means there is no order in IP datagrams, latter sent IP datagram may arrived before former sent.</li>
</ul>


<h2>Header</h2>

<p>TOS: 3 bits precedence field(ignored today), 4 bits TOS(mini delay, max throughput, max relability, mini monetary cost), 1 bit always 0. TOS maynot supported by most TCP/IP implementations today, but some routing protocol such as OSPF and IS-IS are capable of making routing decisions based on this field.</p>

<p>Furthermore, a host isn&rsquo;t required to receive a datagram larger than 576 bytes. TCP and UDP will divide user data into small pieces, so one IP datagram will below that limit.</p>

<p>Some small IP datagram will be padded up to the mini length of frame, which maybe 46 or 38 bytes, so total length field is required when you want to know how long the IP datagram&rsquo;s length on earth.</p>

<p>TTL: set by sender, if this datagram pass a router, it will decrease 1, when it reaches 0, this datagram will thrown away, and sender will received an ICMP message. prevent routing loop.</p>

<p>Checksum: TCP, UDP, ICMP, IGMP use same algorithm to computing checksum. Since a router often cheages only TTL value, a router can incrementally update the checksum when it forwards a datagram, instead of calculating the checksum over the entire IP header again.</p>

<h2>IP routing</h2>

<p>The fundamental difference is that a host never forward a datagram from one of its interface to another, while a router forwards datagram.</p>

<p>Router may reach a local optimum result, because every search route table, the router will get a closer next-hop router address, but it may not global optimum.</p>

<p>Frame&rsquo;s destination address(MAC address) may not the really destination address, it may the next-hop router&rsquo;s MAC address, because when it is routing, it can&rsquo;t be found in the current network, it must be routed to a next-hop router, so the destination address is the next-hop router&rsquo;s.</p>

<h2>Subnet addressing</h2>

<p>Don&rsquo;t forget subtract 2, because all 0 bits and all 1 bits address for host address is invalid.</p>

<p>The advantage to using s single class B address with 30 subnets, compared to 30 class C addresses, is that subnetting reduces the size of the Internet&rsquo;s routing tables entry.</p>

<p>A special address: 127.x.x.x means loopback address, not only 127.0.0.1 can be loopback address!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[link-layer]]></title>
    <link href="http://www.youth2009.org/www/blog/2013/07/27/link-layer/"/>
    <updated>2013-07-27T00:03:00+08:00</updated>
    <id>http://www.youth2009.org/www/blog/2013/07/27/link-layer</id>
    <content type="html"><![CDATA[<h2>link layer</h2>

<h3>link layer&rsquo;s usage</h3>

<ol>
<li>send and receive IP datagram</li>
<li>ARP request and reply</li>
<li>RARP request and reply</li>
</ol>


<p>many different link layers, depending on the type of networking: ethernet, token ring, FDDI, RS232 serial lines, etc.</p>

<p>IEEE 802.2/3 format and Ethernet format</p>

<p>in 802 format, after 2 bytes length field, there are 3 bytes LLC and 5 bytes SNAP and data field(38~1492) but in Ethernet format, there will be data field(46~1500), the end field is 4 bytes CRC.</p>

<p>frame formats use 48-bits destination and source address</p>

<h2>SLIP: Serial Line IP</h2>

<p>END &mdash; 0xc0</p>

<p>SLIP ESC &mdash; 0xdb</p>

<p>IP datagram will be terminated by a special character called END(0xc0), most implementations transmit an END at the beginning of the datagram.</p>

<p>if a byte of IP datagram equals:</p>

<p>0xc0 &mdash;> 0xdb, 0xdc</p>

<p>0xdb&mdash;>0xdb, 0xdd</p>

<h2>PPP</h2>

<ol>
<li>async link with 8bits of data and no parity(no checksum)</li>
<li>bit-oriented sync links</li>
</ol>


<p>start and end with a flag byte whose value is 0x7e, and if a byte value appears in information field, it should be escaped.</p>

<p>batter than SLIP:(pay for 3 bytes addition)</p>

<ol>
<li>multiple protocols on a serial line</li>
<li>CRC</li>
<li>IP network control protocol negotiate IP address for each end</li>
<li>header compress like CSLIP</li>
<li>link control protocol negotiate many data-link options</li>
</ol>


<h2>Loopback</h2>

<p>127.0.0.1 or localhost is the loopback interface, an IP datagram sent to this must not appear on any network.</p>

<p>datagrams sent to broadcast and multicast addtess are copied to the loopback interface and sent out on the Ethernet.</p>

<p>anything sent to one of the host&rsquo;s own IP addresses is ent to the loopback interface!</p>

<h2>MTU</h2>

<p>if the length of data field in IP datagram is larger than MTU(1500 or 1492 in Ethernet and 802 format), it will be fragmented.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OCP-talks]]></title>
    <link href="http://www.youth2009.org/www/blog/2013/07/26/ocp-talks/"/>
    <updated>2013-07-26T22:27:00+08:00</updated>
    <id>http://www.youth2009.org/www/blog/2013/07/26/ocp-talks</id>
    <content type="html"><![CDATA[<p>Good design should be open for extension and closed for modification. You can extend the module instead of modifying some working code.</p>

<p>Abstraction is the Key: for example, a Client should use an Server object that implemented some interfaces instead of a concrete Server object.</p>

<p>Interface&rsquo;s name should be named more closely associated to the dependent side instead of the implement side.</p>

<p>A function that is closed for modification: if we add some changes for this function, it must be modified for working right, it may unconform OCP. For example, a function that draw all shapes in a shape list, it should be draw shapes one by one, and don&rsquo;t care this shape should draw in this way, another shape should draw in that way, etc.</p>

<p>No matter how &ldquo;closed&rdquo; a module is, there will always be some kind of change against which it is not closed.</p>

<p>Abstraction may gain &ldquo;closed&rdquo; software entity(func, module, class, etc), but it also need trade off.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[use-change-event-on-checkbox]]></title>
    <link href="http://www.youth2009.org/www/blog/2013/07/26/use-change-event-on-checkbox/"/>
    <updated>2013-07-26T09:07:00+08:00</updated>
    <id>http://www.youth2009.org/www/blog/2013/07/26/use-change-event-on-checkbox</id>
    <content type="html"><![CDATA[<p>昨天在一个table的第一行放了一个checkbox, 想做一个效果：一开始这个table的每一行都是冻结状态，点击这一行就激活了，顺便会把checkbox选中，当然直接点checkbox也会激活这一行。可惜在bind event的时候，分别给tr和checkbox加了click事件，tr的click会trigger到checkbox上，这样导致的结果就是点tr会触发checkbox的click handler，但同时又触发了tr的click handler，循环导致最后js崩溃。</p>

<p>后来发现在tr的click handler中检查event.target可以不触发这种死循环，但在checkbox click handler中使用prop判断checked状态不准，在stackoverflow中找到解答：jquery1.8中的 click()和真实的click是不一样的，应该在checkbox上用change event，然后一切ok。</p>

<p>解答：<a href="http://stackoverflow.com/questions/7668826/jquery-triggerclick-not-firing-click-event-on-checkbox">http://stackoverflow.com/questions/7668826/jquery-triggerclick-not-firing-click-event-on-checkbox</a></p>
]]></content>
  </entry>
  
</feed>
